/*
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BounceSearchResponse;
import com.konfigthis.client.model.DeliveryStatsResponse;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BouncesApiApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BouncesApiApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BouncesApiApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getServerToken() == null) {
            throw new IllegalArgumentException("\"X-Postmark-Server-Token\" is required but no API key was provided. Please set \"X-Postmark-Server-Token\" with ApiClient#setServerToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call activateBounceCall(Long bounceid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bounces/{bounceid}/activate"
            .replace("{" + "bounceid" + "}", localVarApiClient.escapeString(bounceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateBounceValidateBeforeCall(Long bounceid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bounceid' is set
        if (bounceid == null) {
            throw new ApiException("Missing the required parameter 'bounceid' when calling activateBounce(Async)");
        }

        return activateBounceCall(bounceid, _callback);

    }


    private ApiResponse<Object> activateBounceWithHttpInfo(Long bounceid) throws ApiException {
        okhttp3.Call localVarCall = activateBounceValidateBeforeCall(bounceid, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call activateBounceAsync(Long bounceid, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateBounceValidateBeforeCall(bounceid, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ActivateBounceRequestBuilder {
        private final Long bounceid;

        private ActivateBounceRequestBuilder(Long bounceid) {
            this.bounceid = bounceid;
        }

        /**
         * Build call for activateBounce
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return activateBounceCall(bounceid, _callback);
        }


        /**
         * Execute activateBounce request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = activateBounceWithHttpInfo(bounceid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute activateBounce request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return activateBounceWithHttpInfo(bounceid);
        }

        /**
         * Execute activateBounce request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return activateBounceAsync(bounceid, _callback);
        }
    }

    /**
     * Activate a bounce
     * 
     * @param bounceid The ID of the Bounce to activate. (required)
     * @return ActivateBounceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ActivateBounceRequestBuilder activateBounce(Long bounceid) throws IllegalArgumentException {
        if (bounceid == null) throw new IllegalArgumentException("\"bounceid\" is required but got null");
        return new ActivateBounceRequestBuilder(bounceid);
    }
    private okhttp3.Call getBounceCall(Long bounceid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bounces/{bounceid}"
            .replace("{" + "bounceid" + "}", localVarApiClient.escapeString(bounceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBounceValidateBeforeCall(Long bounceid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bounceid' is set
        if (bounceid == null) {
            throw new ApiException("Missing the required parameter 'bounceid' when calling getBounce(Async)");
        }

        return getBounceCall(bounceid, _callback);

    }


    private ApiResponse<Object> getBounceWithHttpInfo(Long bounceid) throws ApiException {
        okhttp3.Call localVarCall = getBounceValidateBeforeCall(bounceid, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBounceAsync(Long bounceid, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBounceValidateBeforeCall(bounceid, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBounceRequestBuilder {
        private final Long bounceid;

        private GetBounceRequestBuilder(Long bounceid) {
            this.bounceid = bounceid;
        }

        /**
         * Build call for getBounce
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBounceCall(bounceid, _callback);
        }


        /**
         * Execute getBounce request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getBounceWithHttpInfo(bounceid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBounce request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getBounceWithHttpInfo(bounceid);
        }

        /**
         * Execute getBounce request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getBounceAsync(bounceid, _callback);
        }
    }

    /**
     * Get a single bounce
     * 
     * @param bounceid The ID of the bounce to retrieve. (required)
     * @return GetBounceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetBounceRequestBuilder getBounce(Long bounceid) throws IllegalArgumentException {
        if (bounceid == null) throw new IllegalArgumentException("\"bounceid\" is required but got null");
        return new GetBounceRequestBuilder(bounceid);
    }
    private okhttp3.Call getDeliveryStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deliverystats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeliveryStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getDeliveryStatsCall(_callback);

    }


    private ApiResponse<DeliveryStatsResponse> getDeliveryStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getDeliveryStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DeliveryStatsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDeliveryStatsAsync(final ApiCallback<DeliveryStatsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeliveryStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DeliveryStatsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDeliveryStatsRequestBuilder {

        private GetDeliveryStatsRequestBuilder() {
        }

        /**
         * Build call for getDeliveryStats
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDeliveryStatsCall(_callback);
        }


        /**
         * Execute getDeliveryStats request
         * @return DeliveryStatsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public DeliveryStatsResponse execute() throws ApiException {
            ApiResponse<DeliveryStatsResponse> localVarResp = getDeliveryStatsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDeliveryStats request with HTTP info returned
         * @return ApiResponse&lt;DeliveryStatsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeliveryStatsResponse> executeWithHttpInfo() throws ApiException {
            return getDeliveryStatsWithHttpInfo();
        }

        /**
         * Execute getDeliveryStats request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeliveryStatsResponse> _callback) throws ApiException {
            return getDeliveryStatsAsync(_callback);
        }
    }

    /**
     * Get delivery stats
     * 
     * @return GetDeliveryStatsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetDeliveryStatsRequestBuilder getDeliveryStats() throws IllegalArgumentException {
        return new GetDeliveryStatsRequestBuilder();
    }
    private okhttp3.Call getDumpCall(Long bounceid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bounces/{bounceid}/dump"
            .replace("{" + "bounceid" + "}", localVarApiClient.escapeString(bounceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDumpValidateBeforeCall(Long bounceid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bounceid' is set
        if (bounceid == null) {
            throw new ApiException("Missing the required parameter 'bounceid' when calling getDump(Async)");
        }

        return getDumpCall(bounceid, _callback);

    }


    private ApiResponse<Object> getDumpWithHttpInfo(Long bounceid) throws ApiException {
        okhttp3.Call localVarCall = getDumpValidateBeforeCall(bounceid, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDumpAsync(Long bounceid, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDumpValidateBeforeCall(bounceid, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDumpRequestBuilder {
        private final Long bounceid;

        private GetDumpRequestBuilder(Long bounceid) {
            this.bounceid = bounceid;
        }

        /**
         * Build call for getDump
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDumpCall(bounceid, _callback);
        }


        /**
         * Execute getDump request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getDumpWithHttpInfo(bounceid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDump request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getDumpWithHttpInfo(bounceid);
        }

        /**
         * Execute getDump request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getDumpAsync(bounceid, _callback);
        }
    }

    /**
     * Get bounce dump
     * 
     * @param bounceid The ID for the bounce dump to retrieve. (required)
     * @return GetDumpRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetDumpRequestBuilder getDump(Long bounceid) throws IllegalArgumentException {
        if (bounceid == null) throw new IllegalArgumentException("\"bounceid\" is required but got null");
        return new GetDumpRequestBuilder(bounceid);
    }
    private okhttp3.Call listBouncesCall(Integer count, Integer offset, String type, Boolean inactive, String emailFilter, String messageID, String tag, LocalDate todate, LocalDate fromdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bounces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (inactive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inactive", inactive));
        }

        if (emailFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailFilter", emailFilter));
        }

        if (messageID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("messageID", messageID));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBouncesValidateBeforeCall(Integer count, Integer offset, String type, Boolean inactive, String emailFilter, String messageID, String tag, LocalDate todate, LocalDate fromdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling listBounces(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling listBounces(Async)");
        }

        return listBouncesCall(count, offset, type, inactive, emailFilter, messageID, tag, todate, fromdate, _callback);

    }


    private ApiResponse<BounceSearchResponse> listBouncesWithHttpInfo(Integer count, Integer offset, String type, Boolean inactive, String emailFilter, String messageID, String tag, LocalDate todate, LocalDate fromdate) throws ApiException {
        okhttp3.Call localVarCall = listBouncesValidateBeforeCall(count, offset, type, inactive, emailFilter, messageID, tag, todate, fromdate, null);
        Type localVarReturnType = new TypeToken<BounceSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listBouncesAsync(Integer count, Integer offset, String type, Boolean inactive, String emailFilter, String messageID, String tag, LocalDate todate, LocalDate fromdate, final ApiCallback<BounceSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBouncesValidateBeforeCall(count, offset, type, inactive, emailFilter, messageID, tag, todate, fromdate, _callback);
        Type localVarReturnType = new TypeToken<BounceSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListBouncesRequestBuilder {
        private final Integer count;
        private final Integer offset;
        private String type;
        private Boolean inactive;
        private String emailFilter;
        private String messageID;
        private String tag;
        private LocalDate todate;
        private LocalDate fromdate;

        private ListBouncesRequestBuilder(Integer count, Integer offset) {
            this.count = count;
            this.offset = offset;
        }

        /**
         * Set type
         * @param type Filter by type of bounce (optional)
         * @return ListBouncesRequestBuilder
         */
        public ListBouncesRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set inactive
         * @param inactive Filter by emails that were deactivated by Postmark due to the bounce. Set to true or false. If this isn&#39;t specified it will return both active and inactive. (optional)
         * @return ListBouncesRequestBuilder
         */
        public ListBouncesRequestBuilder inactive(Boolean inactive) {
            this.inactive = inactive;
            return this;
        }
        
        /**
         * Set emailFilter
         * @param emailFilter Filter by email address (optional)
         * @return ListBouncesRequestBuilder
         */
        public ListBouncesRequestBuilder emailFilter(String emailFilter) {
            this.emailFilter = emailFilter;
            return this;
        }
        
        /**
         * Set messageID
         * @param messageID Filter by messageID (optional)
         * @return ListBouncesRequestBuilder
         */
        public ListBouncesRequestBuilder messageID(String messageID) {
            this.messageID = messageID;
            return this;
        }
        
        /**
         * Set tag
         * @param tag Filter by tag (optional)
         * @return ListBouncesRequestBuilder
         */
        public ListBouncesRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set todate
         * @param todate Filter messages up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
         * @return ListBouncesRequestBuilder
         */
        public ListBouncesRequestBuilder todate(LocalDate todate) {
            this.todate = todate;
            return this;
        }
        
        /**
         * Set fromdate
         * @param fromdate Filter messages starting from the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
         * @return ListBouncesRequestBuilder
         */
        public ListBouncesRequestBuilder fromdate(LocalDate fromdate) {
            this.fromdate = fromdate;
            return this;
        }
        
        /**
         * Build call for listBounces
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listBouncesCall(count, offset, type, inactive, emailFilter, messageID, tag, todate, fromdate, _callback);
        }


        /**
         * Execute listBounces request
         * @return BounceSearchResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public BounceSearchResponse execute() throws ApiException {
            ApiResponse<BounceSearchResponse> localVarResp = listBouncesWithHttpInfo(count, offset, type, inactive, emailFilter, messageID, tag, todate, fromdate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listBounces request with HTTP info returned
         * @return ApiResponse&lt;BounceSearchResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BounceSearchResponse> executeWithHttpInfo() throws ApiException {
            return listBouncesWithHttpInfo(count, offset, type, inactive, emailFilter, messageID, tag, todate, fromdate);
        }

        /**
         * Execute listBounces request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BounceSearchResponse> _callback) throws ApiException {
            return listBouncesAsync(count, offset, type, inactive, emailFilter, messageID, tag, todate, fromdate, _callback);
        }
    }

    /**
     * Get bounces
     * 
     * @param count Number of bounces to return per request. Max 500. (required)
     * @param offset Number of bounces to skip. (required)
     * @return ListBouncesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ListBouncesRequestBuilder listBounces(Integer count, Integer offset) throws IllegalArgumentException {
        if (count == null) throw new IllegalArgumentException("\"count\" is required but got null");
        if (offset == null) throw new IllegalArgumentException("\"offset\" is required but got null");
        return new ListBouncesRequestBuilder(count, offset);
    }
}
