/*
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.OutboundOverviewStatsResponse;
import com.konfigthis.client.model.SentCountsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class StatsApiApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StatsApiApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public StatsApiApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getServerToken() == null) {
            throw new IllegalArgumentException("\"X-Postmark-Server-Token\" is required but no API key was provided. Please set \"X-Postmark-Server-Token\" with ApiClient#setServerToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getBounceCountsCall(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/outbound/bounces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBounceCountsValidateBeforeCall(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        return getBounceCountsCall(tag, fromdate, todate, _callback);

    }


    private ApiResponse<Object> getBounceCountsWithHttpInfo(String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        okhttp3.Call localVarCall = getBounceCountsValidateBeforeCall(tag, fromdate, todate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBounceCountsAsync(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBounceCountsValidateBeforeCall(tag, fromdate, todate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBounceCountsRequestBuilder {
        private String tag;
        private LocalDate fromdate;
        private LocalDate todate;

        private GetBounceCountsRequestBuilder() {
        }

        /**
         * Set tag
         * @param tag Filter by tag (optional)
         * @return GetBounceCountsRequestBuilder
         */
        public GetBounceCountsRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set fromdate
         * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
         * @return GetBounceCountsRequestBuilder
         */
        public GetBounceCountsRequestBuilder fromdate(LocalDate fromdate) {
            this.fromdate = fromdate;
            return this;
        }
        
        /**
         * Set todate
         * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
         * @return GetBounceCountsRequestBuilder
         */
        public GetBounceCountsRequestBuilder todate(LocalDate todate) {
            this.todate = todate;
            return this;
        }
        
        /**
         * Build call for getBounceCounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBounceCountsCall(tag, fromdate, todate, _callback);
        }


        /**
         * Execute getBounceCounts request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getBounceCountsWithHttpInfo(tag, fromdate, todate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBounceCounts request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getBounceCountsWithHttpInfo(tag, fromdate, todate);
        }

        /**
         * Execute getBounceCounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getBounceCountsAsync(tag, fromdate, todate, _callback);
        }
    }

    /**
     * Get bounce counts
     * 
     * @return GetBounceCountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetBounceCountsRequestBuilder getBounceCounts() throws IllegalArgumentException {
        return new GetBounceCountsRequestBuilder();
    }
    private okhttp3.Call getBrowserPlatformUsageCall(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/outbound/clicks/platforms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBrowserPlatformUsageValidateBeforeCall(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        return getBrowserPlatformUsageCall(tag, fromdate, todate, _callback);

    }


    private ApiResponse<Object> getBrowserPlatformUsageWithHttpInfo(String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        okhttp3.Call localVarCall = getBrowserPlatformUsageValidateBeforeCall(tag, fromdate, todate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBrowserPlatformUsageAsync(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBrowserPlatformUsageValidateBeforeCall(tag, fromdate, todate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBrowserPlatformUsageRequestBuilder {
        private String tag;
        private LocalDate fromdate;
        private LocalDate todate;

        private GetBrowserPlatformUsageRequestBuilder() {
        }

        /**
         * Set tag
         * @param tag Filter by tag (optional)
         * @return GetBrowserPlatformUsageRequestBuilder
         */
        public GetBrowserPlatformUsageRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set fromdate
         * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
         * @return GetBrowserPlatformUsageRequestBuilder
         */
        public GetBrowserPlatformUsageRequestBuilder fromdate(LocalDate fromdate) {
            this.fromdate = fromdate;
            return this;
        }
        
        /**
         * Set todate
         * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
         * @return GetBrowserPlatformUsageRequestBuilder
         */
        public GetBrowserPlatformUsageRequestBuilder todate(LocalDate todate) {
            this.todate = todate;
            return this;
        }
        
        /**
         * Build call for getBrowserPlatformUsage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBrowserPlatformUsageCall(tag, fromdate, todate, _callback);
        }


        /**
         * Execute getBrowserPlatformUsage request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getBrowserPlatformUsageWithHttpInfo(tag, fromdate, todate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBrowserPlatformUsage request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getBrowserPlatformUsageWithHttpInfo(tag, fromdate, todate);
        }

        /**
         * Execute getBrowserPlatformUsage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getBrowserPlatformUsageAsync(tag, fromdate, todate, _callback);
        }
    }

    /**
     * Get browser plaform usage
     * 
     * @return GetBrowserPlatformUsageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetBrowserPlatformUsageRequestBuilder getBrowserPlatformUsage() throws IllegalArgumentException {
        return new GetBrowserPlatformUsageRequestBuilder();
    }
    private okhttp3.Call getEmailClientUsageCall(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/outbound/opens/emailclients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailClientUsageValidateBeforeCall(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        return getEmailClientUsageCall(tag, fromdate, todate, _callback);

    }


    private ApiResponse<Object> getEmailClientUsageWithHttpInfo(String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        okhttp3.Call localVarCall = getEmailClientUsageValidateBeforeCall(tag, fromdate, todate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailClientUsageAsync(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailClientUsageValidateBeforeCall(tag, fromdate, todate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEmailClientUsageRequestBuilder {
        private String tag;
        private LocalDate fromdate;
        private LocalDate todate;

        private GetEmailClientUsageRequestBuilder() {
        }

        /**
         * Set tag
         * @param tag Filter by tag (optional)
         * @return GetEmailClientUsageRequestBuilder
         */
        public GetEmailClientUsageRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set fromdate
         * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
         * @return GetEmailClientUsageRequestBuilder
         */
        public GetEmailClientUsageRequestBuilder fromdate(LocalDate fromdate) {
            this.fromdate = fromdate;
            return this;
        }
        
        /**
         * Set todate
         * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
         * @return GetEmailClientUsageRequestBuilder
         */
        public GetEmailClientUsageRequestBuilder todate(LocalDate todate) {
            this.todate = todate;
            return this;
        }
        
        /**
         * Build call for getEmailClientUsage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailClientUsageCall(tag, fromdate, todate, _callback);
        }


        /**
         * Execute getEmailClientUsage request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getEmailClientUsageWithHttpInfo(tag, fromdate, todate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEmailClientUsage request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getEmailClientUsageWithHttpInfo(tag, fromdate, todate);
        }

        /**
         * Execute getEmailClientUsage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getEmailClientUsageAsync(tag, fromdate, todate, _callback);
        }
    }

    /**
     * Get email client usage
     * 
     * @return GetEmailClientUsageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetEmailClientUsageRequestBuilder getEmailClientUsage() throws IllegalArgumentException {
        return new GetEmailClientUsageRequestBuilder();
    }
    private okhttp3.Call getEmailOpenCountsCall(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/outbound/opens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailOpenCountsValidateBeforeCall(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        return getEmailOpenCountsCall(tag, fromdate, todate, _callback);

    }


    private ApiResponse<Object> getEmailOpenCountsWithHttpInfo(String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        okhttp3.Call localVarCall = getEmailOpenCountsValidateBeforeCall(tag, fromdate, todate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailOpenCountsAsync(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailOpenCountsValidateBeforeCall(tag, fromdate, todate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEmailOpenCountsRequestBuilder {
        private String tag;
        private LocalDate fromdate;
        private LocalDate todate;

        private GetEmailOpenCountsRequestBuilder() {
        }

        /**
         * Set tag
         * @param tag Filter by tag (optional)
         * @return GetEmailOpenCountsRequestBuilder
         */
        public GetEmailOpenCountsRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set fromdate
         * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
         * @return GetEmailOpenCountsRequestBuilder
         */
        public GetEmailOpenCountsRequestBuilder fromdate(LocalDate fromdate) {
            this.fromdate = fromdate;
            return this;
        }
        
        /**
         * Set todate
         * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
         * @return GetEmailOpenCountsRequestBuilder
         */
        public GetEmailOpenCountsRequestBuilder todate(LocalDate todate) {
            this.todate = todate;
            return this;
        }
        
        /**
         * Build call for getEmailOpenCounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailOpenCountsCall(tag, fromdate, todate, _callback);
        }


        /**
         * Execute getEmailOpenCounts request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getEmailOpenCountsWithHttpInfo(tag, fromdate, todate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEmailOpenCounts request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getEmailOpenCountsWithHttpInfo(tag, fromdate, todate);
        }

        /**
         * Execute getEmailOpenCounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getEmailOpenCountsAsync(tag, fromdate, todate, _callback);
        }
    }

    /**
     * Get email open counts
     * 
     * @return GetEmailOpenCountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetEmailOpenCountsRequestBuilder getEmailOpenCounts() throws IllegalArgumentException {
        return new GetEmailOpenCountsRequestBuilder();
    }
    private okhttp3.Call getEmailPlatformUsageCall(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/outbound/opens/platforms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailPlatformUsageValidateBeforeCall(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        return getEmailPlatformUsageCall(tag, fromdate, todate, _callback);

    }


    private ApiResponse<Object> getEmailPlatformUsageWithHttpInfo(String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        okhttp3.Call localVarCall = getEmailPlatformUsageValidateBeforeCall(tag, fromdate, todate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailPlatformUsageAsync(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailPlatformUsageValidateBeforeCall(tag, fromdate, todate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEmailPlatformUsageRequestBuilder {
        private String tag;
        private LocalDate fromdate;
        private LocalDate todate;

        private GetEmailPlatformUsageRequestBuilder() {
        }

        /**
         * Set tag
         * @param tag Filter by tag (optional)
         * @return GetEmailPlatformUsageRequestBuilder
         */
        public GetEmailPlatformUsageRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set fromdate
         * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
         * @return GetEmailPlatformUsageRequestBuilder
         */
        public GetEmailPlatformUsageRequestBuilder fromdate(LocalDate fromdate) {
            this.fromdate = fromdate;
            return this;
        }
        
        /**
         * Set todate
         * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
         * @return GetEmailPlatformUsageRequestBuilder
         */
        public GetEmailPlatformUsageRequestBuilder todate(LocalDate todate) {
            this.todate = todate;
            return this;
        }
        
        /**
         * Build call for getEmailPlatformUsage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailPlatformUsageCall(tag, fromdate, todate, _callback);
        }


        /**
         * Execute getEmailPlatformUsage request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getEmailPlatformUsageWithHttpInfo(tag, fromdate, todate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEmailPlatformUsage request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getEmailPlatformUsageWithHttpInfo(tag, fromdate, todate);
        }

        /**
         * Execute getEmailPlatformUsage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getEmailPlatformUsageAsync(tag, fromdate, todate, _callback);
        }
    }

    /**
     * Get email platform usage
     * 
     * @return GetEmailPlatformUsageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetEmailPlatformUsageRequestBuilder getEmailPlatformUsage() throws IllegalArgumentException {
        return new GetEmailPlatformUsageRequestBuilder();
    }
    private okhttp3.Call getOutboundClickCountsCall(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/outbound/clicks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOutboundClickCountsValidateBeforeCall(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        return getOutboundClickCountsCall(tag, fromdate, todate, _callback);

    }


    private ApiResponse<Object> getOutboundClickCountsWithHttpInfo(String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        okhttp3.Call localVarCall = getOutboundClickCountsValidateBeforeCall(tag, fromdate, todate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOutboundClickCountsAsync(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOutboundClickCountsValidateBeforeCall(tag, fromdate, todate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOutboundClickCountsRequestBuilder {
        private String tag;
        private LocalDate fromdate;
        private LocalDate todate;

        private GetOutboundClickCountsRequestBuilder() {
        }

        /**
         * Set tag
         * @param tag Filter by tag (optional)
         * @return GetOutboundClickCountsRequestBuilder
         */
        public GetOutboundClickCountsRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set fromdate
         * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
         * @return GetOutboundClickCountsRequestBuilder
         */
        public GetOutboundClickCountsRequestBuilder fromdate(LocalDate fromdate) {
            this.fromdate = fromdate;
            return this;
        }
        
        /**
         * Set todate
         * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
         * @return GetOutboundClickCountsRequestBuilder
         */
        public GetOutboundClickCountsRequestBuilder todate(LocalDate todate) {
            this.todate = todate;
            return this;
        }
        
        /**
         * Build call for getOutboundClickCounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOutboundClickCountsCall(tag, fromdate, todate, _callback);
        }


        /**
         * Execute getOutboundClickCounts request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getOutboundClickCountsWithHttpInfo(tag, fromdate, todate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOutboundClickCounts request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getOutboundClickCountsWithHttpInfo(tag, fromdate, todate);
        }

        /**
         * Execute getOutboundClickCounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getOutboundClickCountsAsync(tag, fromdate, todate, _callback);
        }
    }

    /**
     * Get click counts
     * 
     * @return GetOutboundClickCountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetOutboundClickCountsRequestBuilder getOutboundClickCounts() throws IllegalArgumentException {
        return new GetOutboundClickCountsRequestBuilder();
    }
    private okhttp3.Call getOutboundClicksBrowserFamiliesCall(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/outbound/clicks/browserfamilies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOutboundClicksBrowserFamiliesValidateBeforeCall(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        return getOutboundClicksBrowserFamiliesCall(tag, fromdate, todate, _callback);

    }


    private ApiResponse<Object> getOutboundClicksBrowserFamiliesWithHttpInfo(String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        okhttp3.Call localVarCall = getOutboundClicksBrowserFamiliesValidateBeforeCall(tag, fromdate, todate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOutboundClicksBrowserFamiliesAsync(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOutboundClicksBrowserFamiliesValidateBeforeCall(tag, fromdate, todate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOutboundClicksBrowserFamiliesRequestBuilder {
        private String tag;
        private LocalDate fromdate;
        private LocalDate todate;

        private GetOutboundClicksBrowserFamiliesRequestBuilder() {
        }

        /**
         * Set tag
         * @param tag Filter by tag (optional)
         * @return GetOutboundClicksBrowserFamiliesRequestBuilder
         */
        public GetOutboundClicksBrowserFamiliesRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set fromdate
         * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
         * @return GetOutboundClicksBrowserFamiliesRequestBuilder
         */
        public GetOutboundClicksBrowserFamiliesRequestBuilder fromdate(LocalDate fromdate) {
            this.fromdate = fromdate;
            return this;
        }
        
        /**
         * Set todate
         * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
         * @return GetOutboundClicksBrowserFamiliesRequestBuilder
         */
        public GetOutboundClicksBrowserFamiliesRequestBuilder todate(LocalDate todate) {
            this.todate = todate;
            return this;
        }
        
        /**
         * Build call for getOutboundClicksBrowserFamilies
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOutboundClicksBrowserFamiliesCall(tag, fromdate, todate, _callback);
        }


        /**
         * Execute getOutboundClicksBrowserFamilies request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getOutboundClicksBrowserFamiliesWithHttpInfo(tag, fromdate, todate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOutboundClicksBrowserFamilies request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getOutboundClicksBrowserFamiliesWithHttpInfo(tag, fromdate, todate);
        }

        /**
         * Execute getOutboundClicksBrowserFamilies request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getOutboundClicksBrowserFamiliesAsync(tag, fromdate, todate, _callback);
        }
    }

    /**
     * Get browser usage by family
     * 
     * @return GetOutboundClicksBrowserFamiliesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetOutboundClicksBrowserFamiliesRequestBuilder getOutboundClicksBrowserFamilies() throws IllegalArgumentException {
        return new GetOutboundClicksBrowserFamiliesRequestBuilder();
    }
    private okhttp3.Call getOutboundClicksLocationCall(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/outbound/clicks/location";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOutboundClicksLocationValidateBeforeCall(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        return getOutboundClicksLocationCall(tag, fromdate, todate, _callback);

    }


    private ApiResponse<Object> getOutboundClicksLocationWithHttpInfo(String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        okhttp3.Call localVarCall = getOutboundClicksLocationValidateBeforeCall(tag, fromdate, todate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOutboundClicksLocationAsync(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOutboundClicksLocationValidateBeforeCall(tag, fromdate, todate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOutboundClicksLocationRequestBuilder {
        private String tag;
        private LocalDate fromdate;
        private LocalDate todate;

        private GetOutboundClicksLocationRequestBuilder() {
        }

        /**
         * Set tag
         * @param tag Filter by tag (optional)
         * @return GetOutboundClicksLocationRequestBuilder
         */
        public GetOutboundClicksLocationRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set fromdate
         * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
         * @return GetOutboundClicksLocationRequestBuilder
         */
        public GetOutboundClicksLocationRequestBuilder fromdate(LocalDate fromdate) {
            this.fromdate = fromdate;
            return this;
        }
        
        /**
         * Set todate
         * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
         * @return GetOutboundClicksLocationRequestBuilder
         */
        public GetOutboundClicksLocationRequestBuilder todate(LocalDate todate) {
            this.todate = todate;
            return this;
        }
        
        /**
         * Build call for getOutboundClicksLocation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOutboundClicksLocationCall(tag, fromdate, todate, _callback);
        }


        /**
         * Execute getOutboundClicksLocation request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getOutboundClicksLocationWithHttpInfo(tag, fromdate, todate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOutboundClicksLocation request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getOutboundClicksLocationWithHttpInfo(tag, fromdate, todate);
        }

        /**
         * Execute getOutboundClicksLocation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getOutboundClicksLocationAsync(tag, fromdate, todate, _callback);
        }
    }

    /**
     * Get clicks by body location
     * 
     * @return GetOutboundClicksLocationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetOutboundClicksLocationRequestBuilder getOutboundClicksLocation() throws IllegalArgumentException {
        return new GetOutboundClicksLocationRequestBuilder();
    }
    private okhttp3.Call getOutboundOverviewCall(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/outbound";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOutboundOverviewValidateBeforeCall(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        return getOutboundOverviewCall(tag, fromdate, todate, _callback);

    }


    private ApiResponse<OutboundOverviewStatsResponse> getOutboundOverviewWithHttpInfo(String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        okhttp3.Call localVarCall = getOutboundOverviewValidateBeforeCall(tag, fromdate, todate, null);
        Type localVarReturnType = new TypeToken<OutboundOverviewStatsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOutboundOverviewAsync(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback<OutboundOverviewStatsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOutboundOverviewValidateBeforeCall(tag, fromdate, todate, _callback);
        Type localVarReturnType = new TypeToken<OutboundOverviewStatsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOutboundOverviewRequestBuilder {
        private String tag;
        private LocalDate fromdate;
        private LocalDate todate;

        private GetOutboundOverviewRequestBuilder() {
        }

        /**
         * Set tag
         * @param tag Filter by tag (optional)
         * @return GetOutboundOverviewRequestBuilder
         */
        public GetOutboundOverviewRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set fromdate
         * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
         * @return GetOutboundOverviewRequestBuilder
         */
        public GetOutboundOverviewRequestBuilder fromdate(LocalDate fromdate) {
            this.fromdate = fromdate;
            return this;
        }
        
        /**
         * Set todate
         * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
         * @return GetOutboundOverviewRequestBuilder
         */
        public GetOutboundOverviewRequestBuilder todate(LocalDate todate) {
            this.todate = todate;
            return this;
        }
        
        /**
         * Build call for getOutboundOverview
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOutboundOverviewCall(tag, fromdate, todate, _callback);
        }


        /**
         * Execute getOutboundOverview request
         * @return OutboundOverviewStatsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public OutboundOverviewStatsResponse execute() throws ApiException {
            ApiResponse<OutboundOverviewStatsResponse> localVarResp = getOutboundOverviewWithHttpInfo(tag, fromdate, todate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOutboundOverview request with HTTP info returned
         * @return ApiResponse&lt;OutboundOverviewStatsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OutboundOverviewStatsResponse> executeWithHttpInfo() throws ApiException {
            return getOutboundOverviewWithHttpInfo(tag, fromdate, todate);
        }

        /**
         * Execute getOutboundOverview request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OutboundOverviewStatsResponse> _callback) throws ApiException {
            return getOutboundOverviewAsync(tag, fromdate, todate, _callback);
        }
    }

    /**
     * Get outbound overview
     * 
     * @return GetOutboundOverviewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetOutboundOverviewRequestBuilder getOutboundOverview() throws IllegalArgumentException {
        return new GetOutboundOverviewRequestBuilder();
    }
    private okhttp3.Call getSentCountsCall(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/outbound/sends";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSentCountsValidateBeforeCall(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        return getSentCountsCall(tag, fromdate, todate, _callback);

    }


    private ApiResponse<SentCountsResponse> getSentCountsWithHttpInfo(String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        okhttp3.Call localVarCall = getSentCountsValidateBeforeCall(tag, fromdate, todate, null);
        Type localVarReturnType = new TypeToken<SentCountsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSentCountsAsync(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback<SentCountsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSentCountsValidateBeforeCall(tag, fromdate, todate, _callback);
        Type localVarReturnType = new TypeToken<SentCountsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSentCountsRequestBuilder {
        private String tag;
        private LocalDate fromdate;
        private LocalDate todate;

        private GetSentCountsRequestBuilder() {
        }

        /**
         * Set tag
         * @param tag Filter by tag (optional)
         * @return GetSentCountsRequestBuilder
         */
        public GetSentCountsRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set fromdate
         * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
         * @return GetSentCountsRequestBuilder
         */
        public GetSentCountsRequestBuilder fromdate(LocalDate fromdate) {
            this.fromdate = fromdate;
            return this;
        }
        
        /**
         * Set todate
         * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
         * @return GetSentCountsRequestBuilder
         */
        public GetSentCountsRequestBuilder todate(LocalDate todate) {
            this.todate = todate;
            return this;
        }
        
        /**
         * Build call for getSentCounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSentCountsCall(tag, fromdate, todate, _callback);
        }


        /**
         * Execute getSentCounts request
         * @return SentCountsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public SentCountsResponse execute() throws ApiException {
            ApiResponse<SentCountsResponse> localVarResp = getSentCountsWithHttpInfo(tag, fromdate, todate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSentCounts request with HTTP info returned
         * @return ApiResponse&lt;SentCountsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SentCountsResponse> executeWithHttpInfo() throws ApiException {
            return getSentCountsWithHttpInfo(tag, fromdate, todate);
        }

        /**
         * Execute getSentCounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SentCountsResponse> _callback) throws ApiException {
            return getSentCountsAsync(tag, fromdate, todate, _callback);
        }
    }

    /**
     * Get sent counts
     * 
     * @return GetSentCountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetSentCountsRequestBuilder getSentCounts() throws IllegalArgumentException {
        return new GetSentCountsRequestBuilder();
    }
    private okhttp3.Call getSpamComplaintsCall(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/outbound/spam";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpamComplaintsValidateBeforeCall(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        return getSpamComplaintsCall(tag, fromdate, todate, _callback);

    }


    private ApiResponse<Object> getSpamComplaintsWithHttpInfo(String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        okhttp3.Call localVarCall = getSpamComplaintsValidateBeforeCall(tag, fromdate, todate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpamComplaintsAsync(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpamComplaintsValidateBeforeCall(tag, fromdate, todate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpamComplaintsRequestBuilder {
        private String tag;
        private LocalDate fromdate;
        private LocalDate todate;

        private GetSpamComplaintsRequestBuilder() {
        }

        /**
         * Set tag
         * @param tag Filter by tag (optional)
         * @return GetSpamComplaintsRequestBuilder
         */
        public GetSpamComplaintsRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set fromdate
         * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
         * @return GetSpamComplaintsRequestBuilder
         */
        public GetSpamComplaintsRequestBuilder fromdate(LocalDate fromdate) {
            this.fromdate = fromdate;
            return this;
        }
        
        /**
         * Set todate
         * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
         * @return GetSpamComplaintsRequestBuilder
         */
        public GetSpamComplaintsRequestBuilder todate(LocalDate todate) {
            this.todate = todate;
            return this;
        }
        
        /**
         * Build call for getSpamComplaints
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpamComplaintsCall(tag, fromdate, todate, _callback);
        }


        /**
         * Execute getSpamComplaints request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getSpamComplaintsWithHttpInfo(tag, fromdate, todate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpamComplaints request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getSpamComplaintsWithHttpInfo(tag, fromdate, todate);
        }

        /**
         * Execute getSpamComplaints request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getSpamComplaintsAsync(tag, fromdate, todate, _callback);
        }
    }

    /**
     * Get spam complaints
     * 
     * @return GetSpamComplaintsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpamComplaintsRequestBuilder getSpamComplaints() throws IllegalArgumentException {
        return new GetSpamComplaintsRequestBuilder();
    }
    private okhttp3.Call getTrackedEmailCountsCall(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/outbound/tracked";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackedEmailCountsValidateBeforeCall(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        return getTrackedEmailCountsCall(tag, fromdate, todate, _callback);

    }


    private ApiResponse<Object> getTrackedEmailCountsWithHttpInfo(String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        okhttp3.Call localVarCall = getTrackedEmailCountsValidateBeforeCall(tag, fromdate, todate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTrackedEmailCountsAsync(String tag, LocalDate fromdate, LocalDate todate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackedEmailCountsValidateBeforeCall(tag, fromdate, todate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTrackedEmailCountsRequestBuilder {
        private String tag;
        private LocalDate fromdate;
        private LocalDate todate;

        private GetTrackedEmailCountsRequestBuilder() {
        }

        /**
         * Set tag
         * @param tag Filter by tag (optional)
         * @return GetTrackedEmailCountsRequestBuilder
         */
        public GetTrackedEmailCountsRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set fromdate
         * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
         * @return GetTrackedEmailCountsRequestBuilder
         */
        public GetTrackedEmailCountsRequestBuilder fromdate(LocalDate fromdate) {
            this.fromdate = fromdate;
            return this;
        }
        
        /**
         * Set todate
         * @param todate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
         * @return GetTrackedEmailCountsRequestBuilder
         */
        public GetTrackedEmailCountsRequestBuilder todate(LocalDate todate) {
            this.todate = todate;
            return this;
        }
        
        /**
         * Build call for getTrackedEmailCounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTrackedEmailCountsCall(tag, fromdate, todate, _callback);
        }


        /**
         * Execute getTrackedEmailCounts request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getTrackedEmailCountsWithHttpInfo(tag, fromdate, todate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTrackedEmailCounts request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getTrackedEmailCountsWithHttpInfo(tag, fromdate, todate);
        }

        /**
         * Execute getTrackedEmailCounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getTrackedEmailCountsAsync(tag, fromdate, todate, _callback);
        }
    }

    /**
     * Get tracked email counts
     * 
     * @return GetTrackedEmailCountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetTrackedEmailCountsRequestBuilder getTrackedEmailCounts() throws IllegalArgumentException {
        return new GetTrackedEmailCountsRequestBuilder();
    }
}
