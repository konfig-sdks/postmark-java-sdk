/*
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Attachment;
import com.konfigthis.client.model.EmailWithTemplateRequest;
import com.konfigthis.client.model.MessageHeader;
import com.konfigthis.client.model.SendEmailRequest;
import com.konfigthis.client.model.SendEmailResponse;
import com.konfigthis.client.model.SendEmailTemplatedBatchRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SendingApiApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SendingApiApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SendingApiApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getServerToken() == null) {
            throw new IllegalArgumentException("\"X-Postmark-Server-Token\" is required but no API key was provided. Please set \"X-Postmark-Server-Token\" with ApiClient#setServerToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call sendBatchEmailsCall(List<SendEmailRequest> sendEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendEmailRequest;

        // create path and map variables
        String localVarPath = "/email/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendBatchEmailsValidateBeforeCall(List<SendEmailRequest> sendEmailRequest, final ApiCallback _callback) throws ApiException {
        return sendBatchEmailsCall(sendEmailRequest, _callback);

    }


    private ApiResponse<List<SendEmailResponse>> sendBatchEmailsWithHttpInfo(List<SendEmailRequest> sendEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = sendBatchEmailsValidateBeforeCall(sendEmailRequest, null);
        Type localVarReturnType = new TypeToken<List<SendEmailResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendBatchEmailsAsync(List<SendEmailRequest> sendEmailRequest, final ApiCallback<List<SendEmailResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendBatchEmailsValidateBeforeCall(sendEmailRequest, _callback);
        Type localVarReturnType = new TypeToken<List<SendEmailResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendBatchEmailsRequestBuilder {
        private List<SendEmailRequest> sendEmailRequest;

        private SendBatchEmailsRequestBuilder() {
        }

        /**
         * Set sendEmailRequest
         * @param sendEmailRequest  (optional)
         * @return SendBatchEmailsRequestBuilder
         */
        public SendBatchEmailsRequestBuilder sendEmailRequest(List<SendEmailRequest> sendEmailRequest) {
            this.sendEmailRequest = sendEmailRequest;
            return this;
        }

        /**
         * Build call for sendBatchEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<SendEmailRequest> sendEmailRequest = buildBodyParams();
            return sendBatchEmailsCall(sendEmailRequest, _callback);
        }

        private List<SendEmailRequest> buildBodyParams() {
            return this.sendEmailRequest;
        }

        /**
         * Execute sendBatchEmails request
         * @return List&lt;SendEmailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public List<SendEmailResponse> execute() throws ApiException {
            List<SendEmailRequest> sendEmailRequest = buildBodyParams();
            ApiResponse<List<SendEmailResponse>> localVarResp = sendBatchEmailsWithHttpInfo(sendEmailRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendBatchEmails request with HTTP info returned
         * @return ApiResponse&lt;List&lt;SendEmailResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<SendEmailResponse>> executeWithHttpInfo() throws ApiException {
            List<SendEmailRequest> sendEmailRequest = buildBodyParams();
            return sendBatchEmailsWithHttpInfo(sendEmailRequest);
        }

        /**
         * Execute sendBatchEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<SendEmailResponse>> _callback) throws ApiException {
            List<SendEmailRequest> sendEmailRequest = buildBodyParams();
            return sendBatchEmailsAsync(sendEmailRequest, _callback);
        }
    }

    /**
     * Send a batch of emails
     * 
     * @return SendBatchEmailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public SendBatchEmailsRequestBuilder sendBatchEmails() throws IllegalArgumentException {
        return new SendBatchEmailsRequestBuilder();
    }
    private okhttp3.Call sendBatchWithTemplatesCall(SendEmailTemplatedBatchRequest sendEmailTemplatedBatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendEmailTemplatedBatchRequest;

        // create path and map variables
        String localVarPath = "/email/batchWithTemplates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendBatchWithTemplatesValidateBeforeCall(SendEmailTemplatedBatchRequest sendEmailTemplatedBatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sendEmailTemplatedBatchRequest' is set
        if (sendEmailTemplatedBatchRequest == null) {
            throw new ApiException("Missing the required parameter 'sendEmailTemplatedBatchRequest' when calling sendBatchWithTemplates(Async)");
        }

        return sendBatchWithTemplatesCall(sendEmailTemplatedBatchRequest, _callback);

    }


    private ApiResponse<List<SendEmailResponse>> sendBatchWithTemplatesWithHttpInfo(SendEmailTemplatedBatchRequest sendEmailTemplatedBatchRequest) throws ApiException {
        okhttp3.Call localVarCall = sendBatchWithTemplatesValidateBeforeCall(sendEmailTemplatedBatchRequest, null);
        Type localVarReturnType = new TypeToken<List<SendEmailResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendBatchWithTemplatesAsync(SendEmailTemplatedBatchRequest sendEmailTemplatedBatchRequest, final ApiCallback<List<SendEmailResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendBatchWithTemplatesValidateBeforeCall(sendEmailTemplatedBatchRequest, _callback);
        Type localVarReturnType = new TypeToken<List<SendEmailResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendBatchWithTemplatesRequestBuilder {
        private List<EmailWithTemplateRequest> messages;

        private SendBatchWithTemplatesRequestBuilder() {
        }

        /**
         * Set messages
         * @param messages  (optional)
         * @return SendBatchWithTemplatesRequestBuilder
         */
        public SendBatchWithTemplatesRequestBuilder messages(List<EmailWithTemplateRequest> messages) {
            this.messages = messages;
            return this;
        }
        
        /**
         * Build call for sendBatchWithTemplates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SendEmailTemplatedBatchRequest sendEmailTemplatedBatchRequest = buildBodyParams();
            return sendBatchWithTemplatesCall(sendEmailTemplatedBatchRequest, _callback);
        }

        private SendEmailTemplatedBatchRequest buildBodyParams() {
            SendEmailTemplatedBatchRequest sendEmailTemplatedBatchRequest = new SendEmailTemplatedBatchRequest();
            sendEmailTemplatedBatchRequest.messages(this.messages);
            return sendEmailTemplatedBatchRequest;
        }

        /**
         * Execute sendBatchWithTemplates request
         * @return List&lt;SendEmailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public List<SendEmailResponse> execute() throws ApiException {
            SendEmailTemplatedBatchRequest sendEmailTemplatedBatchRequest = buildBodyParams();
            ApiResponse<List<SendEmailResponse>> localVarResp = sendBatchWithTemplatesWithHttpInfo(sendEmailTemplatedBatchRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendBatchWithTemplates request with HTTP info returned
         * @return ApiResponse&lt;List&lt;SendEmailResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<SendEmailResponse>> executeWithHttpInfo() throws ApiException {
            SendEmailTemplatedBatchRequest sendEmailTemplatedBatchRequest = buildBodyParams();
            return sendBatchWithTemplatesWithHttpInfo(sendEmailTemplatedBatchRequest);
        }

        /**
         * Execute sendBatchWithTemplates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<SendEmailResponse>> _callback) throws ApiException {
            SendEmailTemplatedBatchRequest sendEmailTemplatedBatchRequest = buildBodyParams();
            return sendBatchWithTemplatesAsync(sendEmailTemplatedBatchRequest, _callback);
        }
    }

    /**
     * Send a batch of email using templates.
     * 
     * @param sendEmailTemplatedBatchRequest  (required)
     * @return SendBatchWithTemplatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public SendBatchWithTemplatesRequestBuilder sendBatchWithTemplates() throws IllegalArgumentException {
        return new SendBatchWithTemplatesRequestBuilder();
    }
    private okhttp3.Call sendEmailTemplateCall(EmailWithTemplateRequest emailWithTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emailWithTemplateRequest;

        // create path and map variables
        String localVarPath = "/email/withTemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendEmailTemplateValidateBeforeCall(EmailWithTemplateRequest emailWithTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailWithTemplateRequest' is set
        if (emailWithTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'emailWithTemplateRequest' when calling sendEmailTemplate(Async)");
        }

        return sendEmailTemplateCall(emailWithTemplateRequest, _callback);

    }


    private ApiResponse<SendEmailResponse> sendEmailTemplateWithHttpInfo(EmailWithTemplateRequest emailWithTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = sendEmailTemplateValidateBeforeCall(emailWithTemplateRequest, null);
        Type localVarReturnType = new TypeToken<SendEmailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendEmailTemplateAsync(EmailWithTemplateRequest emailWithTemplateRequest, final ApiCallback<SendEmailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendEmailTemplateValidateBeforeCall(emailWithTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<SendEmailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendEmailTemplateRequestBuilder {
        private final String from;
        private final String templateAlias;
        private final Integer templateId;
        private final Object templateModel;
        private final String to;
        private List<Attachment> attachments;
        private String bcc;
        private String cc;
        private List<MessageHeader> headers;
        private Boolean inlineCss;
        private String replyTo;
        private String tag;
        private String trackLinks;
        private Boolean trackOpens;

        private SendEmailTemplateRequestBuilder(String from, String templateAlias, Integer templateId, Object templateModel, String to) {
            this.from = from;
            this.templateAlias = templateAlias;
            this.templateId = templateId;
            this.templateModel = templateModel;
            this.to = to;
        }

        /**
         * Set attachments
         * @param attachments  (optional)
         * @return SendEmailTemplateRequestBuilder
         */
        public SendEmailTemplateRequestBuilder attachments(List<Attachment> attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Set bcc
         * @param bcc  (optional)
         * @return SendEmailTemplateRequestBuilder
         */
        public SendEmailTemplateRequestBuilder bcc(String bcc) {
            this.bcc = bcc;
            return this;
        }
        
        /**
         * Set cc
         * @param cc  (optional)
         * @return SendEmailTemplateRequestBuilder
         */
        public SendEmailTemplateRequestBuilder cc(String cc) {
            this.cc = cc;
            return this;
        }
        
        /**
         * Set headers
         * @param headers  (optional)
         * @return SendEmailTemplateRequestBuilder
         */
        public SendEmailTemplateRequestBuilder headers(List<MessageHeader> headers) {
            this.headers = headers;
            return this;
        }
        
        /**
         * Set inlineCss
         * @param inlineCss  (optional, default to true)
         * @return SendEmailTemplateRequestBuilder
         */
        public SendEmailTemplateRequestBuilder inlineCss(Boolean inlineCss) {
            this.inlineCss = inlineCss;
            return this;
        }
        
        /**
         * Set replyTo
         * @param replyTo  (optional)
         * @return SendEmailTemplateRequestBuilder
         */
        public SendEmailTemplateRequestBuilder replyTo(String replyTo) {
            this.replyTo = replyTo;
            return this;
        }
        
        /**
         * Set tag
         * @param tag  (optional)
         * @return SendEmailTemplateRequestBuilder
         */
        public SendEmailTemplateRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set trackLinks
         * @param trackLinks Replace links in content to enable \\\&quot;click tracking\\\&quot; stats. Default is &#39;null&#39;, which uses the server&#39;s LinkTracking setting&#39;. (optional)
         * @return SendEmailTemplateRequestBuilder
         */
        public SendEmailTemplateRequestBuilder trackLinks(String trackLinks) {
            this.trackLinks = trackLinks;
            return this;
        }
        
        /**
         * Set trackOpens
         * @param trackOpens Activate open tracking for this email. (optional)
         * @return SendEmailTemplateRequestBuilder
         */
        public SendEmailTemplateRequestBuilder trackOpens(Boolean trackOpens) {
            this.trackOpens = trackOpens;
            return this;
        }
        
        /**
         * Build call for sendEmailTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmailWithTemplateRequest emailWithTemplateRequest = buildBodyParams();
            return sendEmailTemplateCall(emailWithTemplateRequest, _callback);
        }

        private EmailWithTemplateRequest buildBodyParams() {
            EmailWithTemplateRequest emailWithTemplateRequest = new EmailWithTemplateRequest();
            emailWithTemplateRequest.attachments(this.attachments);
            emailWithTemplateRequest.bcc(this.bcc);
            emailWithTemplateRequest.cc(this.cc);
            emailWithTemplateRequest.from(this.from);
            emailWithTemplateRequest.headers(this.headers);
            emailWithTemplateRequest.inlineCss(this.inlineCss);
            emailWithTemplateRequest.replyTo(this.replyTo);
            emailWithTemplateRequest.tag(this.tag);
            emailWithTemplateRequest.templateAlias(this.templateAlias);
            emailWithTemplateRequest.templateId(this.templateId);
            emailWithTemplateRequest.templateModel(this.templateModel);
            emailWithTemplateRequest.to(this.to);
            if (this.trackLinks != null)
            emailWithTemplateRequest.trackLinks(EmailWithTemplateRequest.TrackLinksEnum.fromValue(this.trackLinks));
            emailWithTemplateRequest.trackOpens(this.trackOpens);
            return emailWithTemplateRequest;
        }

        /**
         * Execute sendEmailTemplate request
         * @return SendEmailResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public SendEmailResponse execute() throws ApiException {
            EmailWithTemplateRequest emailWithTemplateRequest = buildBodyParams();
            ApiResponse<SendEmailResponse> localVarResp = sendEmailTemplateWithHttpInfo(emailWithTemplateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendEmailTemplate request with HTTP info returned
         * @return ApiResponse&lt;SendEmailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SendEmailResponse> executeWithHttpInfo() throws ApiException {
            EmailWithTemplateRequest emailWithTemplateRequest = buildBodyParams();
            return sendEmailTemplateWithHttpInfo(emailWithTemplateRequest);
        }

        /**
         * Execute sendEmailTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SendEmailResponse> _callback) throws ApiException {
            EmailWithTemplateRequest emailWithTemplateRequest = buildBodyParams();
            return sendEmailTemplateAsync(emailWithTemplateRequest, _callback);
        }
    }

    /**
     * Send an email using a Template
     * 
     * @param emailWithTemplateRequest  (required)
     * @return SendEmailTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public SendEmailTemplateRequestBuilder sendEmailTemplate(String from, String templateAlias, Integer templateId, Object templateModel, String to) throws IllegalArgumentException {
        if (from == null) throw new IllegalArgumentException("\"from\" is required but got null");
            

        if (templateAlias == null) throw new IllegalArgumentException("\"templateAlias\" is required but got null");
            

        if (templateId == null) throw new IllegalArgumentException("\"templateId\" is required but got null");
        if (templateModel == null) throw new IllegalArgumentException("\"templateModel\" is required but got null");
        if (to == null) throw new IllegalArgumentException("\"to\" is required but got null");
            

        return new SendEmailTemplateRequestBuilder(from, templateAlias, templateId, templateModel, to);
    }
    private okhttp3.Call sendSingleEmailCall(SendEmailRequest sendEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendEmailRequest;

        // create path and map variables
        String localVarPath = "/email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendSingleEmailValidateBeforeCall(SendEmailRequest sendEmailRequest, final ApiCallback _callback) throws ApiException {
        return sendSingleEmailCall(sendEmailRequest, _callback);

    }


    private ApiResponse<SendEmailResponse> sendSingleEmailWithHttpInfo(SendEmailRequest sendEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = sendSingleEmailValidateBeforeCall(sendEmailRequest, null);
        Type localVarReturnType = new TypeToken<SendEmailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendSingleEmailAsync(SendEmailRequest sendEmailRequest, final ApiCallback<SendEmailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendSingleEmailValidateBeforeCall(sendEmailRequest, _callback);
        Type localVarReturnType = new TypeToken<SendEmailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendSingleEmailRequestBuilder {
        private List<Attachment> attachments;
        private String bcc;
        private String cc;
        private String from;
        private List<MessageHeader> headers;
        private String htmlBody;
        private String replyTo;
        private String subject;
        private String tag;
        private String textBody;
        private String to;
        private String trackLinks;
        private Boolean trackOpens;

        private SendSingleEmailRequestBuilder() {
        }

        /**
         * Set attachments
         * @param attachments  (optional)
         * @return SendSingleEmailRequestBuilder
         */
        public SendSingleEmailRequestBuilder attachments(List<Attachment> attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Set bcc
         * @param bcc Bcc recipient email address. Multiple addresses are comma seperated. Max 50. (optional)
         * @return SendSingleEmailRequestBuilder
         */
        public SendSingleEmailRequestBuilder bcc(String bcc) {
            this.bcc = bcc;
            return this;
        }
        
        /**
         * Set cc
         * @param cc Recipient email address. Multiple addresses are comma seperated. Max 50. (optional)
         * @return SendSingleEmailRequestBuilder
         */
        public SendSingleEmailRequestBuilder cc(String cc) {
            this.cc = cc;
            return this;
        }
        
        /**
         * Set from
         * @param from The sender email address. Must have a registered and confirmed Sender Signature. (optional)
         * @return SendSingleEmailRequestBuilder
         */
        public SendSingleEmailRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set headers
         * @param headers  (optional)
         * @return SendSingleEmailRequestBuilder
         */
        public SendSingleEmailRequestBuilder headers(List<MessageHeader> headers) {
            this.headers = headers;
            return this;
        }
        
        /**
         * Set htmlBody
         * @param htmlBody If no TextBody specified HTML email message (optional)
         * @return SendSingleEmailRequestBuilder
         */
        public SendSingleEmailRequestBuilder htmlBody(String htmlBody) {
            this.htmlBody = htmlBody;
            return this;
        }
        
        /**
         * Set replyTo
         * @param replyTo Reply To override email address. Defaults to the Reply To set in the sender signature. (optional)
         * @return SendSingleEmailRequestBuilder
         */
        public SendSingleEmailRequestBuilder replyTo(String replyTo) {
            this.replyTo = replyTo;
            return this;
        }
        
        /**
         * Set subject
         * @param subject Email Subject (optional)
         * @return SendSingleEmailRequestBuilder
         */
        public SendSingleEmailRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set tag
         * @param tag Email tag that allows you to categorize outgoing emails and get detailed statistics. (optional)
         * @return SendSingleEmailRequestBuilder
         */
        public SendSingleEmailRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set textBody
         * @param textBody If no HtmlBody specified Plain text email message (optional)
         * @return SendSingleEmailRequestBuilder
         */
        public SendSingleEmailRequestBuilder textBody(String textBody) {
            this.textBody = textBody;
            return this;
        }
        
        /**
         * Set to
         * @param to Recipient email address. Multiple addresses are comma seperated. Max 50. (optional)
         * @return SendSingleEmailRequestBuilder
         */
        public SendSingleEmailRequestBuilder to(String to) {
            this.to = to;
            return this;
        }
        
        /**
         * Set trackLinks
         * @param trackLinks Replace links in content to enable \\\&quot;click tracking\\\&quot; stats. Default is &#39;null&#39;, which uses the server&#39;s LinkTracking setting&#39;. (optional)
         * @return SendSingleEmailRequestBuilder
         */
        public SendSingleEmailRequestBuilder trackLinks(String trackLinks) {
            this.trackLinks = trackLinks;
            return this;
        }
        
        /**
         * Set trackOpens
         * @param trackOpens Activate open tracking for this email. (optional)
         * @return SendSingleEmailRequestBuilder
         */
        public SendSingleEmailRequestBuilder trackOpens(Boolean trackOpens) {
            this.trackOpens = trackOpens;
            return this;
        }
        
        /**
         * Build call for sendSingleEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SendEmailRequest sendEmailRequest = buildBodyParams();
            return sendSingleEmailCall(sendEmailRequest, _callback);
        }

        private SendEmailRequest buildBodyParams() {
            SendEmailRequest sendEmailRequest = new SendEmailRequest();
            sendEmailRequest.attachments(this.attachments);
            sendEmailRequest.bcc(this.bcc);
            sendEmailRequest.cc(this.cc);
            sendEmailRequest.from(this.from);
            sendEmailRequest.headers(this.headers);
            sendEmailRequest.htmlBody(this.htmlBody);
            sendEmailRequest.replyTo(this.replyTo);
            sendEmailRequest.subject(this.subject);
            sendEmailRequest.tag(this.tag);
            sendEmailRequest.textBody(this.textBody);
            sendEmailRequest.to(this.to);
            if (this.trackLinks != null)
            sendEmailRequest.trackLinks(SendEmailRequest.TrackLinksEnum.fromValue(this.trackLinks));
            sendEmailRequest.trackOpens(this.trackOpens);
            return sendEmailRequest;
        }

        /**
         * Execute sendSingleEmail request
         * @return SendEmailResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public SendEmailResponse execute() throws ApiException {
            SendEmailRequest sendEmailRequest = buildBodyParams();
            ApiResponse<SendEmailResponse> localVarResp = sendSingleEmailWithHttpInfo(sendEmailRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendSingleEmail request with HTTP info returned
         * @return ApiResponse&lt;SendEmailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SendEmailResponse> executeWithHttpInfo() throws ApiException {
            SendEmailRequest sendEmailRequest = buildBodyParams();
            return sendSingleEmailWithHttpInfo(sendEmailRequest);
        }

        /**
         * Execute sendSingleEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SendEmailResponse> _callback) throws ApiException {
            SendEmailRequest sendEmailRequest = buildBodyParams();
            return sendSingleEmailAsync(sendEmailRequest, _callback);
        }
    }

    /**
     * Send a single email
     * 
     * @return SendSingleEmailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public SendSingleEmailRequestBuilder sendSingleEmail() throws IllegalArgumentException {
        return new SendSingleEmailRequestBuilder();
    }
}
