/*
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateInboundRuleRequest;
import com.konfigthis.client.model.StandardPostmarkResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class InboundRulesApiApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InboundRulesApiApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public InboundRulesApiApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getServerToken() == null) {
            throw new IllegalArgumentException("\"X-Postmark-Server-Token\" is required but no API key was provided. Please set \"X-Postmark-Server-Token\" with ApiClient#setServerToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createTriggerCall(CreateInboundRuleRequest createInboundRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createInboundRuleRequest;

        // create path and map variables
        String localVarPath = "/triggers/inboundrules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTriggerValidateBeforeCall(CreateInboundRuleRequest createInboundRuleRequest, final ApiCallback _callback) throws ApiException {
        return createTriggerCall(createInboundRuleRequest, _callback);

    }


    private ApiResponse<Object> createTriggerWithHttpInfo(CreateInboundRuleRequest createInboundRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = createTriggerValidateBeforeCall(createInboundRuleRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTriggerAsync(CreateInboundRuleRequest createInboundRuleRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTriggerValidateBeforeCall(createInboundRuleRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTriggerRequestBuilder {
        private String rule;

        private CreateTriggerRequestBuilder() {
        }

        /**
         * Set rule
         * @param rule  (optional)
         * @return CreateTriggerRequestBuilder
         */
        public CreateTriggerRequestBuilder rule(String rule) {
            this.rule = rule;
            return this;
        }
        
        /**
         * Build call for createTrigger
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateInboundRuleRequest createInboundRuleRequest = buildBodyParams();
            return createTriggerCall(createInboundRuleRequest, _callback);
        }

        private CreateInboundRuleRequest buildBodyParams() {
            CreateInboundRuleRequest createInboundRuleRequest = new CreateInboundRuleRequest();
            createInboundRuleRequest.rule(this.rule);
            return createInboundRuleRequest;
        }

        /**
         * Execute createTrigger request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            CreateInboundRuleRequest createInboundRuleRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = createTriggerWithHttpInfo(createInboundRuleRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTrigger request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            CreateInboundRuleRequest createInboundRuleRequest = buildBodyParams();
            return createTriggerWithHttpInfo(createInboundRuleRequest);
        }

        /**
         * Execute createTrigger request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            CreateInboundRuleRequest createInboundRuleRequest = buildBodyParams();
            return createTriggerAsync(createInboundRuleRequest, _callback);
        }
    }

    /**
     * Create an inbound rule trigger
     * 
     * @return CreateTriggerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public CreateTriggerRequestBuilder createTrigger() throws IllegalArgumentException {
        return new CreateTriggerRequestBuilder();
    }
    private okhttp3.Call deleteSingleTriggerCall(Integer triggerid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/triggers/inboundrules/{triggerid}"
            .replace("{" + "triggerid" + "}", localVarApiClient.escapeString(triggerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSingleTriggerValidateBeforeCall(Integer triggerid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'triggerid' is set
        if (triggerid == null) {
            throw new ApiException("Missing the required parameter 'triggerid' when calling deleteSingleTrigger(Async)");
        }

        return deleteSingleTriggerCall(triggerid, _callback);

    }


    private ApiResponse<StandardPostmarkResponse> deleteSingleTriggerWithHttpInfo(Integer triggerid) throws ApiException {
        okhttp3.Call localVarCall = deleteSingleTriggerValidateBeforeCall(triggerid, null);
        Type localVarReturnType = new TypeToken<StandardPostmarkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteSingleTriggerAsync(Integer triggerid, final ApiCallback<StandardPostmarkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSingleTriggerValidateBeforeCall(triggerid, _callback);
        Type localVarReturnType = new TypeToken<StandardPostmarkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteSingleTriggerRequestBuilder {
        private final Integer triggerid;

        private DeleteSingleTriggerRequestBuilder(Integer triggerid) {
            this.triggerid = triggerid;
        }

        /**
         * Build call for deleteSingleTrigger
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSingleTriggerCall(triggerid, _callback);
        }


        /**
         * Execute deleteSingleTrigger request
         * @return StandardPostmarkResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public StandardPostmarkResponse execute() throws ApiException {
            ApiResponse<StandardPostmarkResponse> localVarResp = deleteSingleTriggerWithHttpInfo(triggerid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteSingleTrigger request with HTTP info returned
         * @return ApiResponse&lt;StandardPostmarkResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StandardPostmarkResponse> executeWithHttpInfo() throws ApiException {
            return deleteSingleTriggerWithHttpInfo(triggerid);
        }

        /**
         * Execute deleteSingleTrigger request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StandardPostmarkResponse> _callback) throws ApiException {
            return deleteSingleTriggerAsync(triggerid, _callback);
        }
    }

    /**
     * Delete a single trigger
     * 
     * @param triggerid The ID of the Inbound Rule that should be deleted. (required)
     * @return DeleteSingleTriggerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSingleTriggerRequestBuilder deleteSingleTrigger(Integer triggerid) throws IllegalArgumentException {
        if (triggerid == null) throw new IllegalArgumentException("\"triggerid\" is required but got null");
        return new DeleteSingleTriggerRequestBuilder(triggerid);
    }
    private okhttp3.Call listTriggersCall(Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/triggers/inboundrules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTriggersValidateBeforeCall(Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling listTriggers(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling listTriggers(Async)");
        }

        return listTriggersCall(count, offset, _callback);

    }


    private ApiResponse<Object> listTriggersWithHttpInfo(Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listTriggersValidateBeforeCall(count, offset, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTriggersAsync(Integer count, Integer offset, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTriggersValidateBeforeCall(count, offset, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTriggersRequestBuilder {
        private final Integer count;
        private final Integer offset;

        private ListTriggersRequestBuilder(Integer count, Integer offset) {
            this.count = count;
            this.offset = offset;
        }

        /**
         * Build call for listTriggers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTriggersCall(count, offset, _callback);
        }


        /**
         * Execute listTriggers request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = listTriggersWithHttpInfo(count, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTriggers request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return listTriggersWithHttpInfo(count, offset);
        }

        /**
         * Execute listTriggers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return listTriggersAsync(count, offset, _callback);
        }
    }

    /**
     * List inbound rule triggers
     * 
     * @param count Number of records to return per request. (required)
     * @param offset Number of records to skip. (required)
     * @return ListTriggersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ListTriggersRequestBuilder listTriggers(Integer count, Integer offset) throws IllegalArgumentException {
        if (count == null) throw new IllegalArgumentException("\"count\" is required but got null");
        if (offset == null) throw new IllegalArgumentException("\"offset\" is required but got null");
        return new ListTriggersRequestBuilder(count, offset);
    }
}
