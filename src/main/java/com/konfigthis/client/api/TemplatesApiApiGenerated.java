/*
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Attachment;
import com.konfigthis.client.model.CreateTemplateRequest;
import com.konfigthis.client.model.EditTemplateRequest;
import com.konfigthis.client.model.EmailWithTemplateRequest;
import com.konfigthis.client.model.MessageHeader;
import com.konfigthis.client.model.SendEmailResponse;
import com.konfigthis.client.model.SendEmailTemplatedBatchRequest;
import com.konfigthis.client.model.TemplateValidationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TemplatesApiApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TemplatesApiApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TemplatesApiApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getServerToken() == null) {
            throw new IllegalArgumentException("\"X-Postmark-Server-Token\" is required but no API key was provided. Please set \"X-Postmark-Server-Token\" with ApiClient#setServerToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createTemplateCall(CreateTemplateRequest createTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTemplateRequest;

        // create path and map variables
        String localVarPath = "/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTemplateValidateBeforeCall(CreateTemplateRequest createTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createTemplateRequest' is set
        if (createTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'createTemplateRequest' when calling createTemplate(Async)");
        }

        return createTemplateCall(createTemplateRequest, _callback);

    }


    private ApiResponse<Object> createTemplateWithHttpInfo(CreateTemplateRequest createTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = createTemplateValidateBeforeCall(createTemplateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTemplateAsync(CreateTemplateRequest createTemplateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTemplateValidateBeforeCall(createTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTemplateRequestBuilder {
        private final String name;
        private final String subject;
        private String alias;
        private String htmlBody;
        private String textBody;

        private CreateTemplateRequestBuilder(String name, String subject) {
            this.name = name;
            this.subject = subject;
        }

        /**
         * Set alias
         * @param alias The optional string identifier for referring to this Template (numbers, letters, and &#39;.&#39;, &#39;-&#39;, &#39;_&#39; characters, starts with a letter). (optional)
         * @return CreateTemplateRequestBuilder
         */
        public CreateTemplateRequestBuilder alias(String alias) {
            this.alias = alias;
            return this;
        }
        
        /**
         * Set htmlBody
         * @param htmlBody The HTML template definition for this Template. (optional)
         * @return CreateTemplateRequestBuilder
         */
        public CreateTemplateRequestBuilder htmlBody(String htmlBody) {
            this.htmlBody = htmlBody;
            return this;
        }
        
        /**
         * Set textBody
         * @param textBody The Text template definition for this Template. (optional)
         * @return CreateTemplateRequestBuilder
         */
        public CreateTemplateRequestBuilder textBody(String textBody) {
            this.textBody = textBody;
            return this;
        }
        
        /**
         * Build call for createTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateTemplateRequest createTemplateRequest = buildBodyParams();
            return createTemplateCall(createTemplateRequest, _callback);
        }

        private CreateTemplateRequest buildBodyParams() {
            CreateTemplateRequest createTemplateRequest = new CreateTemplateRequest();
            createTemplateRequest.alias(this.alias);
            createTemplateRequest.htmlBody(this.htmlBody);
            createTemplateRequest.name(this.name);
            createTemplateRequest.subject(this.subject);
            createTemplateRequest.textBody(this.textBody);
            return createTemplateRequest;
        }

        /**
         * Execute createTemplate request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            CreateTemplateRequest createTemplateRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = createTemplateWithHttpInfo(createTemplateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTemplate request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            CreateTemplateRequest createTemplateRequest = buildBodyParams();
            return createTemplateWithHttpInfo(createTemplateRequest);
        }

        /**
         * Execute createTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            CreateTemplateRequest createTemplateRequest = buildBodyParams();
            return createTemplateAsync(createTemplateRequest, _callback);
        }
    }

    /**
     * Create a Template
     * 
     * @param createTemplateRequest  (required)
     * @return CreateTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public CreateTemplateRequestBuilder createTemplate(String name, String subject) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (subject == null) throw new IllegalArgumentException("\"subject\" is required but got null");
            

        return new CreateTemplateRequestBuilder(name, subject);
    }
    private okhttp3.Call deleteTemplateCall(String templateIdOrAlias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{templateIdOrAlias}"
            .replace("{" + "templateIdOrAlias" + "}", localVarApiClient.escapeString(templateIdOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTemplateValidateBeforeCall(String templateIdOrAlias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateIdOrAlias' is set
        if (templateIdOrAlias == null) {
            throw new ApiException("Missing the required parameter 'templateIdOrAlias' when calling deleteTemplate(Async)");
        }

        return deleteTemplateCall(templateIdOrAlias, _callback);

    }


    private ApiResponse<Object> deleteTemplateWithHttpInfo(String templateIdOrAlias) throws ApiException {
        okhttp3.Call localVarCall = deleteTemplateValidateBeforeCall(templateIdOrAlias, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteTemplateAsync(String templateIdOrAlias, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTemplateValidateBeforeCall(templateIdOrAlias, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteTemplateRequestBuilder {
        private final String templateIdOrAlias;

        private DeleteTemplateRequestBuilder(String templateIdOrAlias) {
            this.templateIdOrAlias = templateIdOrAlias;
        }

        /**
         * Build call for deleteTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTemplateCall(templateIdOrAlias, _callback);
        }


        /**
         * Execute deleteTemplate request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteTemplateWithHttpInfo(templateIdOrAlias);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteTemplate request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteTemplateWithHttpInfo(templateIdOrAlias);
        }

        /**
         * Execute deleteTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteTemplateAsync(templateIdOrAlias, _callback);
        }
    }

    /**
     * Delete a Template
     * 
     * @param templateIdOrAlias The &#39;TemplateID&#39; or &#39;Alias&#39; value for the Template you wish to delete. (required)
     * @return DeleteTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTemplateRequestBuilder deleteTemplate(String templateIdOrAlias) throws IllegalArgumentException {
        if (templateIdOrAlias == null) throw new IllegalArgumentException("\"templateIdOrAlias\" is required but got null");
            

        return new DeleteTemplateRequestBuilder(templateIdOrAlias);
    }
    private okhttp3.Call getTemplateByIdCall(String templateIdOrAlias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{templateIdOrAlias}"
            .replace("{" + "templateIdOrAlias" + "}", localVarApiClient.escapeString(templateIdOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTemplateByIdValidateBeforeCall(String templateIdOrAlias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateIdOrAlias' is set
        if (templateIdOrAlias == null) {
            throw new ApiException("Missing the required parameter 'templateIdOrAlias' when calling getTemplateById(Async)");
        }

        return getTemplateByIdCall(templateIdOrAlias, _callback);

    }


    private ApiResponse<Object> getTemplateByIdWithHttpInfo(String templateIdOrAlias) throws ApiException {
        okhttp3.Call localVarCall = getTemplateByIdValidateBeforeCall(templateIdOrAlias, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTemplateByIdAsync(String templateIdOrAlias, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTemplateByIdValidateBeforeCall(templateIdOrAlias, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTemplateByIdRequestBuilder {
        private final String templateIdOrAlias;

        private GetTemplateByIdRequestBuilder(String templateIdOrAlias) {
            this.templateIdOrAlias = templateIdOrAlias;
        }

        /**
         * Build call for getTemplateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTemplateByIdCall(templateIdOrAlias, _callback);
        }


        /**
         * Execute getTemplateById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getTemplateByIdWithHttpInfo(templateIdOrAlias);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTemplateById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getTemplateByIdWithHttpInfo(templateIdOrAlias);
        }

        /**
         * Execute getTemplateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getTemplateByIdAsync(templateIdOrAlias, _callback);
        }
    }

    /**
     * Get a Template
     * 
     * @param templateIdOrAlias The &#39;TemplateID&#39; or &#39;Alias&#39; value for the Template you wish to retrieve. (required)
     * @return GetTemplateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetTemplateByIdRequestBuilder getTemplateById(String templateIdOrAlias) throws IllegalArgumentException {
        if (templateIdOrAlias == null) throw new IllegalArgumentException("\"templateIdOrAlias\" is required but got null");
            

        return new GetTemplateByIdRequestBuilder(templateIdOrAlias);
    }
    private okhttp3.Call listTemplatesCall(Double count, Double offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTemplatesValidateBeforeCall(Double count, Double offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling listTemplates(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling listTemplates(Async)");
        }

        return listTemplatesCall(count, offset, _callback);

    }


    private ApiResponse<Object> listTemplatesWithHttpInfo(Double count, Double offset) throws ApiException {
        okhttp3.Call localVarCall = listTemplatesValidateBeforeCall(count, offset, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTemplatesAsync(Double count, Double offset, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTemplatesValidateBeforeCall(count, offset, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTemplatesRequestBuilder {
        private final Double count;
        private final Double offset;

        private ListTemplatesRequestBuilder(double count, double offset) {
            this.count = count;
            this.offset = offset;
        }

        /**
         * Build call for listTemplates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTemplatesCall(count, offset, _callback);
        }


        /**
         * Execute listTemplates request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = listTemplatesWithHttpInfo(count, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTemplates request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return listTemplatesWithHttpInfo(count, offset);
        }

        /**
         * Execute listTemplates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return listTemplatesAsync(count, offset, _callback);
        }
    }

    /**
     * Get the Templates associated with this Server
     * 
     * @param count The number of Templates to return (required)
     * @param offset The number of Templates to \&quot;skip\&quot; before returning results. (required)
     * @return ListTemplatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ListTemplatesRequestBuilder listTemplates(double count, double offset) throws IllegalArgumentException {
        
        
        return new ListTemplatesRequestBuilder(count, offset);
    }
    private okhttp3.Call sendBatchWithTemplatesCall(SendEmailTemplatedBatchRequest sendEmailTemplatedBatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendEmailTemplatedBatchRequest;

        // create path and map variables
        String localVarPath = "/email/batchWithTemplates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendBatchWithTemplatesValidateBeforeCall(SendEmailTemplatedBatchRequest sendEmailTemplatedBatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sendEmailTemplatedBatchRequest' is set
        if (sendEmailTemplatedBatchRequest == null) {
            throw new ApiException("Missing the required parameter 'sendEmailTemplatedBatchRequest' when calling sendBatchWithTemplates(Async)");
        }

        return sendBatchWithTemplatesCall(sendEmailTemplatedBatchRequest, _callback);

    }


    private ApiResponse<List<SendEmailResponse>> sendBatchWithTemplatesWithHttpInfo(SendEmailTemplatedBatchRequest sendEmailTemplatedBatchRequest) throws ApiException {
        okhttp3.Call localVarCall = sendBatchWithTemplatesValidateBeforeCall(sendEmailTemplatedBatchRequest, null);
        Type localVarReturnType = new TypeToken<List<SendEmailResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendBatchWithTemplatesAsync(SendEmailTemplatedBatchRequest sendEmailTemplatedBatchRequest, final ApiCallback<List<SendEmailResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendBatchWithTemplatesValidateBeforeCall(sendEmailTemplatedBatchRequest, _callback);
        Type localVarReturnType = new TypeToken<List<SendEmailResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendBatchWithTemplatesRequestBuilder {
        private List<EmailWithTemplateRequest> messages;

        private SendBatchWithTemplatesRequestBuilder() {
        }

        /**
         * Set messages
         * @param messages  (optional)
         * @return SendBatchWithTemplatesRequestBuilder
         */
        public SendBatchWithTemplatesRequestBuilder messages(List<EmailWithTemplateRequest> messages) {
            this.messages = messages;
            return this;
        }
        
        /**
         * Build call for sendBatchWithTemplates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SendEmailTemplatedBatchRequest sendEmailTemplatedBatchRequest = buildBodyParams();
            return sendBatchWithTemplatesCall(sendEmailTemplatedBatchRequest, _callback);
        }

        private SendEmailTemplatedBatchRequest buildBodyParams() {
            SendEmailTemplatedBatchRequest sendEmailTemplatedBatchRequest = new SendEmailTemplatedBatchRequest();
            sendEmailTemplatedBatchRequest.messages(this.messages);
            return sendEmailTemplatedBatchRequest;
        }

        /**
         * Execute sendBatchWithTemplates request
         * @return List&lt;SendEmailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public List<SendEmailResponse> execute() throws ApiException {
            SendEmailTemplatedBatchRequest sendEmailTemplatedBatchRequest = buildBodyParams();
            ApiResponse<List<SendEmailResponse>> localVarResp = sendBatchWithTemplatesWithHttpInfo(sendEmailTemplatedBatchRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendBatchWithTemplates request with HTTP info returned
         * @return ApiResponse&lt;List&lt;SendEmailResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<SendEmailResponse>> executeWithHttpInfo() throws ApiException {
            SendEmailTemplatedBatchRequest sendEmailTemplatedBatchRequest = buildBodyParams();
            return sendBatchWithTemplatesWithHttpInfo(sendEmailTemplatedBatchRequest);
        }

        /**
         * Execute sendBatchWithTemplates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<SendEmailResponse>> _callback) throws ApiException {
            SendEmailTemplatedBatchRequest sendEmailTemplatedBatchRequest = buildBodyParams();
            return sendBatchWithTemplatesAsync(sendEmailTemplatedBatchRequest, _callback);
        }
    }

    /**
     * Send a batch of email using templates.
     * 
     * @param sendEmailTemplatedBatchRequest  (required)
     * @return SendBatchWithTemplatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public SendBatchWithTemplatesRequestBuilder sendBatchWithTemplates() throws IllegalArgumentException {
        return new SendBatchWithTemplatesRequestBuilder();
    }
    private okhttp3.Call sendEmailTemplateCall(EmailWithTemplateRequest emailWithTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emailWithTemplateRequest;

        // create path and map variables
        String localVarPath = "/email/withTemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendEmailTemplateValidateBeforeCall(EmailWithTemplateRequest emailWithTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailWithTemplateRequest' is set
        if (emailWithTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'emailWithTemplateRequest' when calling sendEmailTemplate(Async)");
        }

        return sendEmailTemplateCall(emailWithTemplateRequest, _callback);

    }


    private ApiResponse<SendEmailResponse> sendEmailTemplateWithHttpInfo(EmailWithTemplateRequest emailWithTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = sendEmailTemplateValidateBeforeCall(emailWithTemplateRequest, null);
        Type localVarReturnType = new TypeToken<SendEmailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendEmailTemplateAsync(EmailWithTemplateRequest emailWithTemplateRequest, final ApiCallback<SendEmailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendEmailTemplateValidateBeforeCall(emailWithTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<SendEmailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendEmailTemplateRequestBuilder {
        private final String from;
        private final String templateAlias;
        private final Integer templateId;
        private final Object templateModel;
        private final String to;
        private List<Attachment> attachments;
        private String bcc;
        private String cc;
        private List<MessageHeader> headers;
        private Boolean inlineCss;
        private String replyTo;
        private String tag;
        private String trackLinks;
        private Boolean trackOpens;

        private SendEmailTemplateRequestBuilder(String from, String templateAlias, Integer templateId, Object templateModel, String to) {
            this.from = from;
            this.templateAlias = templateAlias;
            this.templateId = templateId;
            this.templateModel = templateModel;
            this.to = to;
        }

        /**
         * Set attachments
         * @param attachments  (optional)
         * @return SendEmailTemplateRequestBuilder
         */
        public SendEmailTemplateRequestBuilder attachments(List<Attachment> attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Set bcc
         * @param bcc  (optional)
         * @return SendEmailTemplateRequestBuilder
         */
        public SendEmailTemplateRequestBuilder bcc(String bcc) {
            this.bcc = bcc;
            return this;
        }
        
        /**
         * Set cc
         * @param cc  (optional)
         * @return SendEmailTemplateRequestBuilder
         */
        public SendEmailTemplateRequestBuilder cc(String cc) {
            this.cc = cc;
            return this;
        }
        
        /**
         * Set headers
         * @param headers  (optional)
         * @return SendEmailTemplateRequestBuilder
         */
        public SendEmailTemplateRequestBuilder headers(List<MessageHeader> headers) {
            this.headers = headers;
            return this;
        }
        
        /**
         * Set inlineCss
         * @param inlineCss  (optional, default to true)
         * @return SendEmailTemplateRequestBuilder
         */
        public SendEmailTemplateRequestBuilder inlineCss(Boolean inlineCss) {
            this.inlineCss = inlineCss;
            return this;
        }
        
        /**
         * Set replyTo
         * @param replyTo  (optional)
         * @return SendEmailTemplateRequestBuilder
         */
        public SendEmailTemplateRequestBuilder replyTo(String replyTo) {
            this.replyTo = replyTo;
            return this;
        }
        
        /**
         * Set tag
         * @param tag  (optional)
         * @return SendEmailTemplateRequestBuilder
         */
        public SendEmailTemplateRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set trackLinks
         * @param trackLinks Replace links in content to enable \\\&quot;click tracking\\\&quot; stats. Default is &#39;null&#39;, which uses the server&#39;s LinkTracking setting&#39;. (optional)
         * @return SendEmailTemplateRequestBuilder
         */
        public SendEmailTemplateRequestBuilder trackLinks(String trackLinks) {
            this.trackLinks = trackLinks;
            return this;
        }
        
        /**
         * Set trackOpens
         * @param trackOpens Activate open tracking for this email. (optional)
         * @return SendEmailTemplateRequestBuilder
         */
        public SendEmailTemplateRequestBuilder trackOpens(Boolean trackOpens) {
            this.trackOpens = trackOpens;
            return this;
        }
        
        /**
         * Build call for sendEmailTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmailWithTemplateRequest emailWithTemplateRequest = buildBodyParams();
            return sendEmailTemplateCall(emailWithTemplateRequest, _callback);
        }

        private EmailWithTemplateRequest buildBodyParams() {
            EmailWithTemplateRequest emailWithTemplateRequest = new EmailWithTemplateRequest();
            emailWithTemplateRequest.attachments(this.attachments);
            emailWithTemplateRequest.bcc(this.bcc);
            emailWithTemplateRequest.cc(this.cc);
            emailWithTemplateRequest.from(this.from);
            emailWithTemplateRequest.headers(this.headers);
            emailWithTemplateRequest.inlineCss(this.inlineCss);
            emailWithTemplateRequest.replyTo(this.replyTo);
            emailWithTemplateRequest.tag(this.tag);
            emailWithTemplateRequest.templateAlias(this.templateAlias);
            emailWithTemplateRequest.templateId(this.templateId);
            emailWithTemplateRequest.templateModel(this.templateModel);
            emailWithTemplateRequest.to(this.to);
            if (this.trackLinks != null)
            emailWithTemplateRequest.trackLinks(EmailWithTemplateRequest.TrackLinksEnum.fromValue(this.trackLinks));
            emailWithTemplateRequest.trackOpens(this.trackOpens);
            return emailWithTemplateRequest;
        }

        /**
         * Execute sendEmailTemplate request
         * @return SendEmailResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public SendEmailResponse execute() throws ApiException {
            EmailWithTemplateRequest emailWithTemplateRequest = buildBodyParams();
            ApiResponse<SendEmailResponse> localVarResp = sendEmailTemplateWithHttpInfo(emailWithTemplateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendEmailTemplate request with HTTP info returned
         * @return ApiResponse&lt;SendEmailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SendEmailResponse> executeWithHttpInfo() throws ApiException {
            EmailWithTemplateRequest emailWithTemplateRequest = buildBodyParams();
            return sendEmailTemplateWithHttpInfo(emailWithTemplateRequest);
        }

        /**
         * Execute sendEmailTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SendEmailResponse> _callback) throws ApiException {
            EmailWithTemplateRequest emailWithTemplateRequest = buildBodyParams();
            return sendEmailTemplateAsync(emailWithTemplateRequest, _callback);
        }
    }

    /**
     * Send an email using a Template
     * 
     * @param emailWithTemplateRequest  (required)
     * @return SendEmailTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public SendEmailTemplateRequestBuilder sendEmailTemplate(String from, String templateAlias, Integer templateId, Object templateModel, String to) throws IllegalArgumentException {
        if (from == null) throw new IllegalArgumentException("\"from\" is required but got null");
            

        if (templateAlias == null) throw new IllegalArgumentException("\"templateAlias\" is required but got null");
            

        if (templateId == null) throw new IllegalArgumentException("\"templateId\" is required but got null");
        if (templateModel == null) throw new IllegalArgumentException("\"templateModel\" is required but got null");
        if (to == null) throw new IllegalArgumentException("\"to\" is required but got null");
            

        return new SendEmailTemplateRequestBuilder(from, templateAlias, templateId, templateModel, to);
    }
    private okhttp3.Call updateTemplateCall(String templateIdOrAlias, EditTemplateRequest editTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editTemplateRequest;

        // create path and map variables
        String localVarPath = "/templates/{templateIdOrAlias}"
            .replace("{" + "templateIdOrAlias" + "}", localVarApiClient.escapeString(templateIdOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTemplateValidateBeforeCall(String templateIdOrAlias, EditTemplateRequest editTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateIdOrAlias' is set
        if (templateIdOrAlias == null) {
            throw new ApiException("Missing the required parameter 'templateIdOrAlias' when calling updateTemplate(Async)");
        }

        // verify the required parameter 'editTemplateRequest' is set
        if (editTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'editTemplateRequest' when calling updateTemplate(Async)");
        }

        return updateTemplateCall(templateIdOrAlias, editTemplateRequest, _callback);

    }


    private ApiResponse<Object> updateTemplateWithHttpInfo(String templateIdOrAlias, EditTemplateRequest editTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTemplateValidateBeforeCall(templateIdOrAlias, editTemplateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTemplateAsync(String templateIdOrAlias, EditTemplateRequest editTemplateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTemplateValidateBeforeCall(templateIdOrAlias, editTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTemplateRequestBuilder {
        private final String templateIdOrAlias;
        private String alias;
        private String htmlBody;
        private String name;
        private String subject;
        private String textBody;

        private UpdateTemplateRequestBuilder(String templateIdOrAlias) {
            this.templateIdOrAlias = templateIdOrAlias;
        }

        /**
         * Set alias
         * @param alias The optional string identifier for referring to this Template (numbers, letters, and &#39;.&#39;, &#39;-&#39;, &#39;_&#39; characters, starts with a letter). (optional)
         * @return UpdateTemplateRequestBuilder
         */
        public UpdateTemplateRequestBuilder alias(String alias) {
            this.alias = alias;
            return this;
        }
        
        /**
         * Set htmlBody
         * @param htmlBody The HTML template definition for this Template. (optional)
         * @return UpdateTemplateRequestBuilder
         */
        public UpdateTemplateRequestBuilder htmlBody(String htmlBody) {
            this.htmlBody = htmlBody;
            return this;
        }
        
        /**
         * Set name
         * @param name The friendly display name for the template. (optional)
         * @return UpdateTemplateRequestBuilder
         */
        public UpdateTemplateRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set subject
         * @param subject The Subject template definition for this Template. (optional)
         * @return UpdateTemplateRequestBuilder
         */
        public UpdateTemplateRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set textBody
         * @param textBody The Text template definition for this Template. (optional)
         * @return UpdateTemplateRequestBuilder
         */
        public UpdateTemplateRequestBuilder textBody(String textBody) {
            this.textBody = textBody;
            return this;
        }
        
        /**
         * Build call for updateTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EditTemplateRequest editTemplateRequest = buildBodyParams();
            return updateTemplateCall(templateIdOrAlias, editTemplateRequest, _callback);
        }

        private EditTemplateRequest buildBodyParams() {
            EditTemplateRequest editTemplateRequest = new EditTemplateRequest();
            editTemplateRequest.alias(this.alias);
            editTemplateRequest.htmlBody(this.htmlBody);
            editTemplateRequest.name(this.name);
            editTemplateRequest.subject(this.subject);
            editTemplateRequest.textBody(this.textBody);
            return editTemplateRequest;
        }

        /**
         * Execute updateTemplate request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            EditTemplateRequest editTemplateRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = updateTemplateWithHttpInfo(templateIdOrAlias, editTemplateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTemplate request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            EditTemplateRequest editTemplateRequest = buildBodyParams();
            return updateTemplateWithHttpInfo(templateIdOrAlias, editTemplateRequest);
        }

        /**
         * Execute updateTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            EditTemplateRequest editTemplateRequest = buildBodyParams();
            return updateTemplateAsync(templateIdOrAlias, editTemplateRequest, _callback);
        }
    }

    /**
     * Update a Template
     * 
     * @param templateIdOrAlias The &#39;TemplateID&#39; or &#39;Alias&#39; value for the Template you wish to update. (required)
     * @param editTemplateRequest  (required)
     * @return UpdateTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTemplateRequestBuilder updateTemplate(String templateIdOrAlias) throws IllegalArgumentException {
        if (templateIdOrAlias == null) throw new IllegalArgumentException("\"templateIdOrAlias\" is required but got null");
            

        return new UpdateTemplateRequestBuilder(templateIdOrAlias);
    }
    private okhttp3.Call validateTemplateContentCall(TemplateValidationRequest templateValidationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templateValidationRequest;

        // create path and map variables
        String localVarPath = "/templates/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "serverToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateTemplateContentValidateBeforeCall(TemplateValidationRequest templateValidationRequest, final ApiCallback _callback) throws ApiException {
        return validateTemplateContentCall(templateValidationRequest, _callback);

    }


    private ApiResponse<Object> validateTemplateContentWithHttpInfo(TemplateValidationRequest templateValidationRequest) throws ApiException {
        okhttp3.Call localVarCall = validateTemplateContentValidateBeforeCall(templateValidationRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call validateTemplateContentAsync(TemplateValidationRequest templateValidationRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateTemplateContentValidateBeforeCall(templateValidationRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ValidateTemplateContentRequestBuilder {
        private String htmlBody;
        private Boolean inlineCssForHtmlTestRender;
        private String subject;
        private Object testRenderModel;
        private String textBody;

        private ValidateTemplateContentRequestBuilder() {
        }

        /**
         * Set htmlBody
         * @param htmlBody The html body content to validate. Must be specified if Subject or TextBody are not. See our template language documentation for more information on the syntax for this field.  (optional)
         * @return ValidateTemplateContentRequestBuilder
         */
        public ValidateTemplateContentRequestBuilder htmlBody(String htmlBody) {
            this.htmlBody = htmlBody;
            return this;
        }
        
        /**
         * Set inlineCssForHtmlTestRender
         * @param inlineCssForHtmlTestRender When HtmlBody is specified, the test render will have style blocks inlined as style attributes on matching html elements. You may disable the css inlining behavior by passing false for this parameter.  (optional, default to true)
         * @return ValidateTemplateContentRequestBuilder
         */
        public ValidateTemplateContentRequestBuilder inlineCssForHtmlTestRender(Boolean inlineCssForHtmlTestRender) {
            this.inlineCssForHtmlTestRender = inlineCssForHtmlTestRender;
            return this;
        }
        
        /**
         * Set subject
         * @param subject The subject content to validate. Must be specified if HtmlBody or TextBody are not. See our template language documentation for more information on the syntax for this field.  (optional)
         * @return ValidateTemplateContentRequestBuilder
         */
        public ValidateTemplateContentRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set testRenderModel
         * @param testRenderModel The model to be used when rendering test content. (optional)
         * @return ValidateTemplateContentRequestBuilder
         */
        public ValidateTemplateContentRequestBuilder testRenderModel(Object testRenderModel) {
            this.testRenderModel = testRenderModel;
            return this;
        }
        
        /**
         * Set textBody
         * @param textBody The text body content to validate. Must be specified if HtmlBody or Subject are not. See our template language documentation for more information on the syntax for this field.  (optional)
         * @return ValidateTemplateContentRequestBuilder
         */
        public ValidateTemplateContentRequestBuilder textBody(String textBody) {
            this.textBody = textBody;
            return this;
        }
        
        /**
         * Build call for validateTemplateContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TemplateValidationRequest templateValidationRequest = buildBodyParams();
            return validateTemplateContentCall(templateValidationRequest, _callback);
        }

        private TemplateValidationRequest buildBodyParams() {
            TemplateValidationRequest templateValidationRequest = new TemplateValidationRequest();
            templateValidationRequest.htmlBody(this.htmlBody);
            templateValidationRequest.inlineCssForHtmlTestRender(this.inlineCssForHtmlTestRender);
            templateValidationRequest.subject(this.subject);
            templateValidationRequest.testRenderModel(this.testRenderModel);
            templateValidationRequest.textBody(this.textBody);
            return templateValidationRequest;
        }

        /**
         * Execute validateTemplateContent request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            TemplateValidationRequest templateValidationRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = validateTemplateContentWithHttpInfo(templateValidationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute validateTemplateContent request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            TemplateValidationRequest templateValidationRequest = buildBodyParams();
            return validateTemplateContentWithHttpInfo(templateValidationRequest);
        }

        /**
         * Execute validateTemplateContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            TemplateValidationRequest templateValidationRequest = buildBodyParams();
            return validateTemplateContentAsync(templateValidationRequest, _callback);
        }
    }

    /**
     * Test Template Content
     * 
     * @return ValidateTemplateContentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ValidateTemplateContentRequestBuilder validateTemplateContent() throws IllegalArgumentException {
        return new ValidateTemplateContentRequestBuilder();
    }
}
