/*
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Attachment;
import com.konfigthis.client.model.EmailNameAddressPair;
import com.konfigthis.client.model.InboundMessageDetailFromFull;
import com.konfigthis.client.model.MessageHeader;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * InboundMessageFullDetailsResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class InboundMessageFullDetailsResponse {
  public static final String SERIALIZED_NAME_ATTACHMENTS = "Attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<Attachment> attachments = null;

  public static final String SERIALIZED_NAME_BLOCKED_REASON = "BlockedReason";
  @SerializedName(SERIALIZED_NAME_BLOCKED_REASON)
  private String blockedReason;

  public static final String SERIALIZED_NAME_CC = "Cc";
  @SerializedName(SERIALIZED_NAME_CC)
  private String cc;

  public static final String SERIALIZED_NAME_CC_FULL = "CcFull";
  @SerializedName(SERIALIZED_NAME_CC_FULL)
  private List<EmailNameAddressPair> ccFull = null;

  public static final String SERIALIZED_NAME_DATE = "Date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_FROM = "From";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_FROM_FULL = "FromFull";
  @SerializedName(SERIALIZED_NAME_FROM_FULL)
  private InboundMessageDetailFromFull fromFull;

  public static final String SERIALIZED_NAME_FROM_NAME = "FromName";
  @SerializedName(SERIALIZED_NAME_FROM_NAME)
  private String fromName;

  public static final String SERIALIZED_NAME_HEADERS = "Headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private List<MessageHeader> headers = null;

  public static final String SERIALIZED_NAME_HTML_BODY = "HtmlBody";
  @SerializedName(SERIALIZED_NAME_HTML_BODY)
  private String htmlBody;

  public static final String SERIALIZED_NAME_MAILBOX_HASH = "MailboxHash";
  @SerializedName(SERIALIZED_NAME_MAILBOX_HASH)
  private String mailboxHash;

  public static final String SERIALIZED_NAME_MESSAGE_I_D = "MessageID";
  @SerializedName(SERIALIZED_NAME_MESSAGE_I_D)
  private String messageID;

  public static final String SERIALIZED_NAME_ORIGINAL_RECIPIENT = "OriginalRecipient";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_RECIPIENT)
  private String originalRecipient;

  public static final String SERIALIZED_NAME_REPLY_TO = "ReplyTo";
  @SerializedName(SERIALIZED_NAME_REPLY_TO)
  private String replyTo;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUBJECT = "Subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TAG = "Tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_TEXT_BODY = "TextBody";
  @SerializedName(SERIALIZED_NAME_TEXT_BODY)
  private String textBody;

  public static final String SERIALIZED_NAME_TO = "To";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_TO_FULL = "ToFull";
  @SerializedName(SERIALIZED_NAME_TO_FULL)
  private List<EmailNameAddressPair> toFull = null;

  public InboundMessageFullDetailsResponse() {
  }

  public InboundMessageFullDetailsResponse attachments(List<Attachment> attachments) {
    
    
    
    
    this.attachments = attachments;
    return this;
  }

  public InboundMessageFullDetailsResponse addAttachmentsItem(Attachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * Get attachments
   * @return attachments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Attachment> getAttachments() {
    return attachments;
  }


  public void setAttachments(List<Attachment> attachments) {
    
    
    
    this.attachments = attachments;
  }


  public InboundMessageFullDetailsResponse blockedReason(String blockedReason) {
    
    
    
    
    this.blockedReason = blockedReason;
    return this;
  }

   /**
   * Get blockedReason
   * @return blockedReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBlockedReason() {
    return blockedReason;
  }


  public void setBlockedReason(String blockedReason) {
    
    
    
    this.blockedReason = blockedReason;
  }


  public InboundMessageFullDetailsResponse cc(String cc) {
    
    
    
    
    this.cc = cc;
    return this;
  }

   /**
   * Get cc
   * @return cc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCc() {
    return cc;
  }


  public void setCc(String cc) {
    
    
    
    this.cc = cc;
  }


  public InboundMessageFullDetailsResponse ccFull(List<EmailNameAddressPair> ccFull) {
    
    
    
    
    this.ccFull = ccFull;
    return this;
  }

  public InboundMessageFullDetailsResponse addCcFullItem(EmailNameAddressPair ccFullItem) {
    if (this.ccFull == null) {
      this.ccFull = new ArrayList<>();
    }
    this.ccFull.add(ccFullItem);
    return this;
  }

   /**
   * Get ccFull
   * @return ccFull
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EmailNameAddressPair> getCcFull() {
    return ccFull;
  }


  public void setCcFull(List<EmailNameAddressPair> ccFull) {
    
    
    
    this.ccFull = ccFull;
  }


  public InboundMessageFullDetailsResponse date(String date) {
    
    
    
    
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDate() {
    return date;
  }


  public void setDate(String date) {
    
    
    
    this.date = date;
  }


  public InboundMessageFullDetailsResponse from(String from) {
    
    
    
    
    this.from = from;
    return this;
  }

   /**
   * Get from
   * @return from
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFrom() {
    return from;
  }


  public void setFrom(String from) {
    
    
    
    this.from = from;
  }


  public InboundMessageFullDetailsResponse fromFull(InboundMessageDetailFromFull fromFull) {
    
    
    
    
    this.fromFull = fromFull;
    return this;
  }

   /**
   * Get fromFull
   * @return fromFull
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public InboundMessageDetailFromFull getFromFull() {
    return fromFull;
  }


  public void setFromFull(InboundMessageDetailFromFull fromFull) {
    
    
    
    this.fromFull = fromFull;
  }


  public InboundMessageFullDetailsResponse fromName(String fromName) {
    
    
    
    
    this.fromName = fromName;
    return this;
  }

   /**
   * Get fromName
   * @return fromName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFromName() {
    return fromName;
  }


  public void setFromName(String fromName) {
    
    
    
    this.fromName = fromName;
  }


  public InboundMessageFullDetailsResponse headers(List<MessageHeader> headers) {
    
    
    
    
    this.headers = headers;
    return this;
  }

  public InboundMessageFullDetailsResponse addHeadersItem(MessageHeader headersItem) {
    if (this.headers == null) {
      this.headers = new ArrayList<>();
    }
    this.headers.add(headersItem);
    return this;
  }

   /**
   * Get headers
   * @return headers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<MessageHeader> getHeaders() {
    return headers;
  }


  public void setHeaders(List<MessageHeader> headers) {
    
    
    
    this.headers = headers;
  }


  public InboundMessageFullDetailsResponse htmlBody(String htmlBody) {
    
    
    
    
    this.htmlBody = htmlBody;
    return this;
  }

   /**
   * Get htmlBody
   * @return htmlBody
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHtmlBody() {
    return htmlBody;
  }


  public void setHtmlBody(String htmlBody) {
    
    
    
    this.htmlBody = htmlBody;
  }


  public InboundMessageFullDetailsResponse mailboxHash(String mailboxHash) {
    
    
    
    
    this.mailboxHash = mailboxHash;
    return this;
  }

   /**
   * Get mailboxHash
   * @return mailboxHash
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMailboxHash() {
    return mailboxHash;
  }


  public void setMailboxHash(String mailboxHash) {
    
    
    
    this.mailboxHash = mailboxHash;
  }


  public InboundMessageFullDetailsResponse messageID(String messageID) {
    
    
    
    
    this.messageID = messageID;
    return this;
  }

   /**
   * Get messageID
   * @return messageID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMessageID() {
    return messageID;
  }


  public void setMessageID(String messageID) {
    
    
    
    this.messageID = messageID;
  }


  public InboundMessageFullDetailsResponse originalRecipient(String originalRecipient) {
    
    
    
    
    this.originalRecipient = originalRecipient;
    return this;
  }

   /**
   * Get originalRecipient
   * @return originalRecipient
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOriginalRecipient() {
    return originalRecipient;
  }


  public void setOriginalRecipient(String originalRecipient) {
    
    
    
    this.originalRecipient = originalRecipient;
  }


  public InboundMessageFullDetailsResponse replyTo(String replyTo) {
    
    
    
    
    this.replyTo = replyTo;
    return this;
  }

   /**
   * Get replyTo
   * @return replyTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReplyTo() {
    return replyTo;
  }


  public void setReplyTo(String replyTo) {
    
    
    
    this.replyTo = replyTo;
  }


  public InboundMessageFullDetailsResponse status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public InboundMessageFullDetailsResponse subject(String subject) {
    
    
    
    
    this.subject = subject;
    return this;
  }

   /**
   * Get subject
   * @return subject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSubject() {
    return subject;
  }


  public void setSubject(String subject) {
    
    
    
    this.subject = subject;
  }


  public InboundMessageFullDetailsResponse tag(String tag) {
    
    
    
    
    this.tag = tag;
    return this;
  }

   /**
   * Get tag
   * @return tag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTag() {
    return tag;
  }


  public void setTag(String tag) {
    
    
    
    this.tag = tag;
  }


  public InboundMessageFullDetailsResponse textBody(String textBody) {
    
    
    
    
    this.textBody = textBody;
    return this;
  }

   /**
   * Get textBody
   * @return textBody
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTextBody() {
    return textBody;
  }


  public void setTextBody(String textBody) {
    
    
    
    this.textBody = textBody;
  }


  public InboundMessageFullDetailsResponse to(String to) {
    
    
    
    
    this.to = to;
    return this;
  }

   /**
   * Get to
   * @return to
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTo() {
    return to;
  }


  public void setTo(String to) {
    
    
    
    this.to = to;
  }


  public InboundMessageFullDetailsResponse toFull(List<EmailNameAddressPair> toFull) {
    
    
    
    
    this.toFull = toFull;
    return this;
  }

  public InboundMessageFullDetailsResponse addToFullItem(EmailNameAddressPair toFullItem) {
    if (this.toFull == null) {
      this.toFull = new ArrayList<>();
    }
    this.toFull.add(toFullItem);
    return this;
  }

   /**
   * Get toFull
   * @return toFull
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EmailNameAddressPair> getToFull() {
    return toFull;
  }


  public void setToFull(List<EmailNameAddressPair> toFull) {
    
    
    
    this.toFull = toFull;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the InboundMessageFullDetailsResponse instance itself
   */
  public InboundMessageFullDetailsResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InboundMessageFullDetailsResponse inboundMessageFullDetailsResponse = (InboundMessageFullDetailsResponse) o;
    return Objects.equals(this.attachments, inboundMessageFullDetailsResponse.attachments) &&
        Objects.equals(this.blockedReason, inboundMessageFullDetailsResponse.blockedReason) &&
        Objects.equals(this.cc, inboundMessageFullDetailsResponse.cc) &&
        Objects.equals(this.ccFull, inboundMessageFullDetailsResponse.ccFull) &&
        Objects.equals(this.date, inboundMessageFullDetailsResponse.date) &&
        Objects.equals(this.from, inboundMessageFullDetailsResponse.from) &&
        Objects.equals(this.fromFull, inboundMessageFullDetailsResponse.fromFull) &&
        Objects.equals(this.fromName, inboundMessageFullDetailsResponse.fromName) &&
        Objects.equals(this.headers, inboundMessageFullDetailsResponse.headers) &&
        Objects.equals(this.htmlBody, inboundMessageFullDetailsResponse.htmlBody) &&
        Objects.equals(this.mailboxHash, inboundMessageFullDetailsResponse.mailboxHash) &&
        Objects.equals(this.messageID, inboundMessageFullDetailsResponse.messageID) &&
        Objects.equals(this.originalRecipient, inboundMessageFullDetailsResponse.originalRecipient) &&
        Objects.equals(this.replyTo, inboundMessageFullDetailsResponse.replyTo) &&
        Objects.equals(this.status, inboundMessageFullDetailsResponse.status) &&
        Objects.equals(this.subject, inboundMessageFullDetailsResponse.subject) &&
        Objects.equals(this.tag, inboundMessageFullDetailsResponse.tag) &&
        Objects.equals(this.textBody, inboundMessageFullDetailsResponse.textBody) &&
        Objects.equals(this.to, inboundMessageFullDetailsResponse.to) &&
        Objects.equals(this.toFull, inboundMessageFullDetailsResponse.toFull)&&
        Objects.equals(this.additionalProperties, inboundMessageFullDetailsResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachments, blockedReason, cc, ccFull, date, from, fromFull, fromName, headers, htmlBody, mailboxHash, messageID, originalRecipient, replyTo, status, subject, tag, textBody, to, toFull, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InboundMessageFullDetailsResponse {\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    blockedReason: ").append(toIndentedString(blockedReason)).append("\n");
    sb.append("    cc: ").append(toIndentedString(cc)).append("\n");
    sb.append("    ccFull: ").append(toIndentedString(ccFull)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    fromFull: ").append(toIndentedString(fromFull)).append("\n");
    sb.append("    fromName: ").append(toIndentedString(fromName)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    htmlBody: ").append(toIndentedString(htmlBody)).append("\n");
    sb.append("    mailboxHash: ").append(toIndentedString(mailboxHash)).append("\n");
    sb.append("    messageID: ").append(toIndentedString(messageID)).append("\n");
    sb.append("    originalRecipient: ").append(toIndentedString(originalRecipient)).append("\n");
    sb.append("    replyTo: ").append(toIndentedString(replyTo)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    textBody: ").append(toIndentedString(textBody)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    toFull: ").append(toIndentedString(toFull)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Attachments");
    openapiFields.add("BlockedReason");
    openapiFields.add("Cc");
    openapiFields.add("CcFull");
    openapiFields.add("Date");
    openapiFields.add("From");
    openapiFields.add("FromFull");
    openapiFields.add("FromName");
    openapiFields.add("Headers");
    openapiFields.add("HtmlBody");
    openapiFields.add("MailboxHash");
    openapiFields.add("MessageID");
    openapiFields.add("OriginalRecipient");
    openapiFields.add("ReplyTo");
    openapiFields.add("Status");
    openapiFields.add("Subject");
    openapiFields.add("Tag");
    openapiFields.add("TextBody");
    openapiFields.add("To");
    openapiFields.add("ToFull");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InboundMessageFullDetailsResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!InboundMessageFullDetailsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InboundMessageFullDetailsResponse is not found in the empty JSON string", InboundMessageFullDetailsResponse.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("Attachments") != null && !jsonObj.get("Attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("Attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Attachments` to be an array in the JSON string but got `%s`", jsonObj.get("Attachments").toString()));
          }

          // validate the optional field `Attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            Attachment.validateJsonObject(jsonArrayattachments.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("BlockedReason") != null && !jsonObj.get("BlockedReason").isJsonNull()) && !jsonObj.get("BlockedReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BlockedReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BlockedReason").toString()));
      }
      if ((jsonObj.get("Cc") != null && !jsonObj.get("Cc").isJsonNull()) && !jsonObj.get("Cc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Cc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Cc").toString()));
      }
      if (jsonObj.get("CcFull") != null && !jsonObj.get("CcFull").isJsonNull()) {
        JsonArray jsonArrayccFull = jsonObj.getAsJsonArray("CcFull");
        if (jsonArrayccFull != null) {
          // ensure the json data is an array
          if (!jsonObj.get("CcFull").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `CcFull` to be an array in the JSON string but got `%s`", jsonObj.get("CcFull").toString()));
          }

          // validate the optional field `CcFull` (array)
          for (int i = 0; i < jsonArrayccFull.size(); i++) {
            EmailNameAddressPair.validateJsonObject(jsonArrayccFull.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("Date") != null && !jsonObj.get("Date").isJsonNull()) && !jsonObj.get("Date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Date").toString()));
      }
      if ((jsonObj.get("From") != null && !jsonObj.get("From").isJsonNull()) && !jsonObj.get("From").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `From` to be a primitive type in the JSON string but got `%s`", jsonObj.get("From").toString()));
      }
      // validate the optional field `FromFull`
      if (jsonObj.get("FromFull") != null && !jsonObj.get("FromFull").isJsonNull()) {
        InboundMessageDetailFromFull.validateJsonObject(jsonObj.getAsJsonObject("FromFull"));
      }
      if ((jsonObj.get("FromName") != null && !jsonObj.get("FromName").isJsonNull()) && !jsonObj.get("FromName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FromName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FromName").toString()));
      }
      if (jsonObj.get("Headers") != null && !jsonObj.get("Headers").isJsonNull()) {
        JsonArray jsonArrayheaders = jsonObj.getAsJsonArray("Headers");
        if (jsonArrayheaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Headers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Headers` to be an array in the JSON string but got `%s`", jsonObj.get("Headers").toString()));
          }

          // validate the optional field `Headers` (array)
          for (int i = 0; i < jsonArrayheaders.size(); i++) {
            MessageHeader.validateJsonObject(jsonArrayheaders.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("HtmlBody") != null && !jsonObj.get("HtmlBody").isJsonNull()) && !jsonObj.get("HtmlBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HtmlBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HtmlBody").toString()));
      }
      if ((jsonObj.get("MailboxHash") != null && !jsonObj.get("MailboxHash").isJsonNull()) && !jsonObj.get("MailboxHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MailboxHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MailboxHash").toString()));
      }
      if ((jsonObj.get("MessageID") != null && !jsonObj.get("MessageID").isJsonNull()) && !jsonObj.get("MessageID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MessageID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MessageID").toString()));
      }
      if ((jsonObj.get("OriginalRecipient") != null && !jsonObj.get("OriginalRecipient").isJsonNull()) && !jsonObj.get("OriginalRecipient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OriginalRecipient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OriginalRecipient").toString()));
      }
      if ((jsonObj.get("ReplyTo") != null && !jsonObj.get("ReplyTo").isJsonNull()) && !jsonObj.get("ReplyTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReplyTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReplyTo").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      if ((jsonObj.get("Subject") != null && !jsonObj.get("Subject").isJsonNull()) && !jsonObj.get("Subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Subject").toString()));
      }
      if ((jsonObj.get("Tag") != null && !jsonObj.get("Tag").isJsonNull()) && !jsonObj.get("Tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Tag").toString()));
      }
      if ((jsonObj.get("TextBody") != null && !jsonObj.get("TextBody").isJsonNull()) && !jsonObj.get("TextBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TextBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TextBody").toString()));
      }
      if ((jsonObj.get("To") != null && !jsonObj.get("To").isJsonNull()) && !jsonObj.get("To").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `To` to be a primitive type in the JSON string but got `%s`", jsonObj.get("To").toString()));
      }
      if (jsonObj.get("ToFull") != null && !jsonObj.get("ToFull").isJsonNull()) {
        JsonArray jsonArraytoFull = jsonObj.getAsJsonArray("ToFull");
        if (jsonArraytoFull != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ToFull").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ToFull` to be an array in the JSON string but got `%s`", jsonObj.get("ToFull").toString()));
          }

          // validate the optional field `ToFull` (array)
          for (int i = 0; i < jsonArraytoFull.size(); i++) {
            EmailNameAddressPair.validateJsonObject(jsonArraytoFull.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InboundMessageFullDetailsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InboundMessageFullDetailsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InboundMessageFullDetailsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InboundMessageFullDetailsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<InboundMessageFullDetailsResponse>() {
           @Override
           public void write(JsonWriter out, InboundMessageFullDetailsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public InboundMessageFullDetailsResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             InboundMessageFullDetailsResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InboundMessageFullDetailsResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InboundMessageFullDetailsResponse
  * @throws IOException if the JSON string is invalid with respect to InboundMessageFullDetailsResponse
  */
  public static InboundMessageFullDetailsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InboundMessageFullDetailsResponse.class);
  }

 /**
  * Convert an instance of InboundMessageFullDetailsResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

