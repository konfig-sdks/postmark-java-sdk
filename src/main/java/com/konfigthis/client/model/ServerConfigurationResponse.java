/*
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ServerConfigurationResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ServerConfigurationResponse {
  public static final String SERIALIZED_NAME_API_TOKENS = "ApiTokens";
  @SerializedName(SERIALIZED_NAME_API_TOKENS)
  private List<String> apiTokens = null;

  public static final String SERIALIZED_NAME_BOUNCE_HOOK_URL = "BounceHookUrl";
  @SerializedName(SERIALIZED_NAME_BOUNCE_HOOK_URL)
  private String bounceHookUrl;

  public static final String SERIALIZED_NAME_CLICK_HOOK_URL = "ClickHookUrl";
  @SerializedName(SERIALIZED_NAME_CLICK_HOOK_URL)
  private String clickHookUrl;

  /**
   * Gets or Sets color
   */
  @JsonAdapter(ColorEnum.Adapter.class)
 public enum ColorEnum {
    PURPLE("purple"),
    
    BLUE("blue"),
    
    TURQOISE("turqoise"),
    
    GREEN("green"),
    
    RED("red"),
    
    YELLOW("yellow"),
    
    GREY("grey");

    private String value;

    ColorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ColorEnum fromValue(String value) {
      for (ColorEnum b : ColorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ColorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ColorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ColorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ColorEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COLOR = "Color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private ColorEnum color;

  public static final String SERIALIZED_NAME_DELIVERY_HOOK_URL = "DeliveryHookUrl";
  @SerializedName(SERIALIZED_NAME_DELIVERY_HOOK_URL)
  private String deliveryHookUrl;

  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private Integer ID;

  public static final String SERIALIZED_NAME_INBOUND_ADDRESS = "InboundAddress";
  @SerializedName(SERIALIZED_NAME_INBOUND_ADDRESS)
  private String inboundAddress;

  public static final String SERIALIZED_NAME_INBOUND_DOMAIN = "InboundDomain";
  @SerializedName(SERIALIZED_NAME_INBOUND_DOMAIN)
  private String inboundDomain;

  public static final String SERIALIZED_NAME_INBOUND_HASH = "InboundHash";
  @SerializedName(SERIALIZED_NAME_INBOUND_HASH)
  private String inboundHash;

  public static final String SERIALIZED_NAME_INBOUND_HOOK_URL = "InboundHookUrl";
  @SerializedName(SERIALIZED_NAME_INBOUND_HOOK_URL)
  private String inboundHookUrl;

  public static final String SERIALIZED_NAME_INBOUND_SPAM_THRESHOLD = "InboundSpamThreshold";
  @SerializedName(SERIALIZED_NAME_INBOUND_SPAM_THRESHOLD)
  private Integer inboundSpamThreshold;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPEN_HOOK_URL = "OpenHookUrl";
  @SerializedName(SERIALIZED_NAME_OPEN_HOOK_URL)
  private String openHookUrl;

  public static final String SERIALIZED_NAME_POST_FIRST_OPEN_ONLY = "PostFirstOpenOnly";
  @SerializedName(SERIALIZED_NAME_POST_FIRST_OPEN_ONLY)
  private Boolean postFirstOpenOnly;

  public static final String SERIALIZED_NAME_RAW_EMAIL_ENABLED = "RawEmailEnabled";
  @SerializedName(SERIALIZED_NAME_RAW_EMAIL_ENABLED)
  private Boolean rawEmailEnabled;

  public static final String SERIALIZED_NAME_SERVER_LINK = "ServerLink";
  @SerializedName(SERIALIZED_NAME_SERVER_LINK)
  private String serverLink;

  public static final String SERIALIZED_NAME_SMTP_API_ACTIVATED = "SmtpApiActivated";
  @SerializedName(SERIALIZED_NAME_SMTP_API_ACTIVATED)
  private Boolean smtpApiActivated;

  /**
   * Gets or Sets trackLinks
   */
  @JsonAdapter(TrackLinksEnum.Adapter.class)
 public enum TrackLinksEnum {
    NONE("None"),
    
    HTMLANDTEXT("HtmlAndText"),
    
    HTMLONLY("HtmlOnly"),
    
    TEXTONLY("TextOnly");

    private String value;

    TrackLinksEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrackLinksEnum fromValue(String value) {
      for (TrackLinksEnum b : TrackLinksEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrackLinksEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrackLinksEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrackLinksEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrackLinksEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TRACK_LINKS = "TrackLinks";
  @SerializedName(SERIALIZED_NAME_TRACK_LINKS)
  private TrackLinksEnum trackLinks;

  public static final String SERIALIZED_NAME_TRACK_OPENS = "TrackOpens";
  @SerializedName(SERIALIZED_NAME_TRACK_OPENS)
  private Boolean trackOpens;

  public ServerConfigurationResponse() {
  }

  public ServerConfigurationResponse apiTokens(List<String> apiTokens) {
    
    
    
    
    this.apiTokens = apiTokens;
    return this;
  }

  public ServerConfigurationResponse addApiTokensItem(String apiTokensItem) {
    if (this.apiTokens == null) {
      this.apiTokens = new ArrayList<>();
    }
    this.apiTokens.add(apiTokensItem);
    return this;
  }

   /**
   * Get apiTokens
   * @return apiTokens
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getApiTokens() {
    return apiTokens;
  }


  public void setApiTokens(List<String> apiTokens) {
    
    
    
    this.apiTokens = apiTokens;
  }


  public ServerConfigurationResponse bounceHookUrl(String bounceHookUrl) {
    
    
    
    
    this.bounceHookUrl = bounceHookUrl;
    return this;
  }

   /**
   * Get bounceHookUrl
   * @return bounceHookUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBounceHookUrl() {
    return bounceHookUrl;
  }


  public void setBounceHookUrl(String bounceHookUrl) {
    
    
    
    this.bounceHookUrl = bounceHookUrl;
  }


  public ServerConfigurationResponse clickHookUrl(String clickHookUrl) {
    
    
    
    
    this.clickHookUrl = clickHookUrl;
    return this;
  }

   /**
   * Get clickHookUrl
   * @return clickHookUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getClickHookUrl() {
    return clickHookUrl;
  }


  public void setClickHookUrl(String clickHookUrl) {
    
    
    
    this.clickHookUrl = clickHookUrl;
  }


  public ServerConfigurationResponse color(ColorEnum color) {
    
    
    
    
    this.color = color;
    return this;
  }

   /**
   * Get color
   * @return color
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ColorEnum getColor() {
    return color;
  }


  public void setColor(ColorEnum color) {
    
    
    
    this.color = color;
  }


  public ServerConfigurationResponse deliveryHookUrl(String deliveryHookUrl) {
    
    
    
    
    this.deliveryHookUrl = deliveryHookUrl;
    return this;
  }

   /**
   * Get deliveryHookUrl
   * @return deliveryHookUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDeliveryHookUrl() {
    return deliveryHookUrl;
  }


  public void setDeliveryHookUrl(String deliveryHookUrl) {
    
    
    
    this.deliveryHookUrl = deliveryHookUrl;
  }


  public ServerConfigurationResponse ID(Integer ID) {
    
    
    
    
    this.ID = ID;
    return this;
  }

   /**
   * Get ID
   * @return ID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getID() {
    return ID;
  }


  public void setID(Integer ID) {
    
    
    
    this.ID = ID;
  }


  public ServerConfigurationResponse inboundAddress(String inboundAddress) {
    
    
    
    
    this.inboundAddress = inboundAddress;
    return this;
  }

   /**
   * Get inboundAddress
   * @return inboundAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getInboundAddress() {
    return inboundAddress;
  }


  public void setInboundAddress(String inboundAddress) {
    
    
    
    this.inboundAddress = inboundAddress;
  }


  public ServerConfigurationResponse inboundDomain(String inboundDomain) {
    
    
    
    
    this.inboundDomain = inboundDomain;
    return this;
  }

   /**
   * Get inboundDomain
   * @return inboundDomain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getInboundDomain() {
    return inboundDomain;
  }


  public void setInboundDomain(String inboundDomain) {
    
    
    
    this.inboundDomain = inboundDomain;
  }


  public ServerConfigurationResponse inboundHash(String inboundHash) {
    
    
    
    
    this.inboundHash = inboundHash;
    return this;
  }

   /**
   * Get inboundHash
   * @return inboundHash
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getInboundHash() {
    return inboundHash;
  }


  public void setInboundHash(String inboundHash) {
    
    
    
    this.inboundHash = inboundHash;
  }


  public ServerConfigurationResponse inboundHookUrl(String inboundHookUrl) {
    
    
    
    
    this.inboundHookUrl = inboundHookUrl;
    return this;
  }

   /**
   * Get inboundHookUrl
   * @return inboundHookUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getInboundHookUrl() {
    return inboundHookUrl;
  }


  public void setInboundHookUrl(String inboundHookUrl) {
    
    
    
    this.inboundHookUrl = inboundHookUrl;
  }


  public ServerConfigurationResponse inboundSpamThreshold(Integer inboundSpamThreshold) {
    
    
    
    
    this.inboundSpamThreshold = inboundSpamThreshold;
    return this;
  }

   /**
   * Get inboundSpamThreshold
   * @return inboundSpamThreshold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getInboundSpamThreshold() {
    return inboundSpamThreshold;
  }


  public void setInboundSpamThreshold(Integer inboundSpamThreshold) {
    
    
    
    this.inboundSpamThreshold = inboundSpamThreshold;
  }


  public ServerConfigurationResponse name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public ServerConfigurationResponse openHookUrl(String openHookUrl) {
    
    
    
    
    this.openHookUrl = openHookUrl;
    return this;
  }

   /**
   * Get openHookUrl
   * @return openHookUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOpenHookUrl() {
    return openHookUrl;
  }


  public void setOpenHookUrl(String openHookUrl) {
    
    
    
    this.openHookUrl = openHookUrl;
  }


  public ServerConfigurationResponse postFirstOpenOnly(Boolean postFirstOpenOnly) {
    
    
    
    
    this.postFirstOpenOnly = postFirstOpenOnly;
    return this;
  }

   /**
   * Get postFirstOpenOnly
   * @return postFirstOpenOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getPostFirstOpenOnly() {
    return postFirstOpenOnly;
  }


  public void setPostFirstOpenOnly(Boolean postFirstOpenOnly) {
    
    
    
    this.postFirstOpenOnly = postFirstOpenOnly;
  }


  public ServerConfigurationResponse rawEmailEnabled(Boolean rawEmailEnabled) {
    
    
    
    
    this.rawEmailEnabled = rawEmailEnabled;
    return this;
  }

   /**
   * Get rawEmailEnabled
   * @return rawEmailEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getRawEmailEnabled() {
    return rawEmailEnabled;
  }


  public void setRawEmailEnabled(Boolean rawEmailEnabled) {
    
    
    
    this.rawEmailEnabled = rawEmailEnabled;
  }


  public ServerConfigurationResponse serverLink(String serverLink) {
    
    
    
    
    this.serverLink = serverLink;
    return this;
  }

   /**
   * Get serverLink
   * @return serverLink
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getServerLink() {
    return serverLink;
  }


  public void setServerLink(String serverLink) {
    
    
    
    this.serverLink = serverLink;
  }


  public ServerConfigurationResponse smtpApiActivated(Boolean smtpApiActivated) {
    
    
    
    
    this.smtpApiActivated = smtpApiActivated;
    return this;
  }

   /**
   * Get smtpApiActivated
   * @return smtpApiActivated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getSmtpApiActivated() {
    return smtpApiActivated;
  }


  public void setSmtpApiActivated(Boolean smtpApiActivated) {
    
    
    
    this.smtpApiActivated = smtpApiActivated;
  }


  public ServerConfigurationResponse trackLinks(TrackLinksEnum trackLinks) {
    
    
    
    
    this.trackLinks = trackLinks;
    return this;
  }

   /**
   * Get trackLinks
   * @return trackLinks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TrackLinksEnum getTrackLinks() {
    return trackLinks;
  }


  public void setTrackLinks(TrackLinksEnum trackLinks) {
    
    
    
    this.trackLinks = trackLinks;
  }


  public ServerConfigurationResponse trackOpens(Boolean trackOpens) {
    
    
    
    
    this.trackOpens = trackOpens;
    return this;
  }

   /**
   * Get trackOpens
   * @return trackOpens
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getTrackOpens() {
    return trackOpens;
  }


  public void setTrackOpens(Boolean trackOpens) {
    
    
    
    this.trackOpens = trackOpens;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ServerConfigurationResponse instance itself
   */
  public ServerConfigurationResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerConfigurationResponse serverConfigurationResponse = (ServerConfigurationResponse) o;
    return Objects.equals(this.apiTokens, serverConfigurationResponse.apiTokens) &&
        Objects.equals(this.bounceHookUrl, serverConfigurationResponse.bounceHookUrl) &&
        Objects.equals(this.clickHookUrl, serverConfigurationResponse.clickHookUrl) &&
        Objects.equals(this.color, serverConfigurationResponse.color) &&
        Objects.equals(this.deliveryHookUrl, serverConfigurationResponse.deliveryHookUrl) &&
        Objects.equals(this.ID, serverConfigurationResponse.ID) &&
        Objects.equals(this.inboundAddress, serverConfigurationResponse.inboundAddress) &&
        Objects.equals(this.inboundDomain, serverConfigurationResponse.inboundDomain) &&
        Objects.equals(this.inboundHash, serverConfigurationResponse.inboundHash) &&
        Objects.equals(this.inboundHookUrl, serverConfigurationResponse.inboundHookUrl) &&
        Objects.equals(this.inboundSpamThreshold, serverConfigurationResponse.inboundSpamThreshold) &&
        Objects.equals(this.name, serverConfigurationResponse.name) &&
        Objects.equals(this.openHookUrl, serverConfigurationResponse.openHookUrl) &&
        Objects.equals(this.postFirstOpenOnly, serverConfigurationResponse.postFirstOpenOnly) &&
        Objects.equals(this.rawEmailEnabled, serverConfigurationResponse.rawEmailEnabled) &&
        Objects.equals(this.serverLink, serverConfigurationResponse.serverLink) &&
        Objects.equals(this.smtpApiActivated, serverConfigurationResponse.smtpApiActivated) &&
        Objects.equals(this.trackLinks, serverConfigurationResponse.trackLinks) &&
        Objects.equals(this.trackOpens, serverConfigurationResponse.trackOpens)&&
        Objects.equals(this.additionalProperties, serverConfigurationResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiTokens, bounceHookUrl, clickHookUrl, color, deliveryHookUrl, ID, inboundAddress, inboundDomain, inboundHash, inboundHookUrl, inboundSpamThreshold, name, openHookUrl, postFirstOpenOnly, rawEmailEnabled, serverLink, smtpApiActivated, trackLinks, trackOpens, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerConfigurationResponse {\n");
    sb.append("    apiTokens: ").append(toIndentedString(apiTokens)).append("\n");
    sb.append("    bounceHookUrl: ").append(toIndentedString(bounceHookUrl)).append("\n");
    sb.append("    clickHookUrl: ").append(toIndentedString(clickHookUrl)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    deliveryHookUrl: ").append(toIndentedString(deliveryHookUrl)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    inboundAddress: ").append(toIndentedString(inboundAddress)).append("\n");
    sb.append("    inboundDomain: ").append(toIndentedString(inboundDomain)).append("\n");
    sb.append("    inboundHash: ").append(toIndentedString(inboundHash)).append("\n");
    sb.append("    inboundHookUrl: ").append(toIndentedString(inboundHookUrl)).append("\n");
    sb.append("    inboundSpamThreshold: ").append(toIndentedString(inboundSpamThreshold)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    openHookUrl: ").append(toIndentedString(openHookUrl)).append("\n");
    sb.append("    postFirstOpenOnly: ").append(toIndentedString(postFirstOpenOnly)).append("\n");
    sb.append("    rawEmailEnabled: ").append(toIndentedString(rawEmailEnabled)).append("\n");
    sb.append("    serverLink: ").append(toIndentedString(serverLink)).append("\n");
    sb.append("    smtpApiActivated: ").append(toIndentedString(smtpApiActivated)).append("\n");
    sb.append("    trackLinks: ").append(toIndentedString(trackLinks)).append("\n");
    sb.append("    trackOpens: ").append(toIndentedString(trackOpens)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApiTokens");
    openapiFields.add("BounceHookUrl");
    openapiFields.add("ClickHookUrl");
    openapiFields.add("Color");
    openapiFields.add("DeliveryHookUrl");
    openapiFields.add("ID");
    openapiFields.add("InboundAddress");
    openapiFields.add("InboundDomain");
    openapiFields.add("InboundHash");
    openapiFields.add("InboundHookUrl");
    openapiFields.add("InboundSpamThreshold");
    openapiFields.add("Name");
    openapiFields.add("OpenHookUrl");
    openapiFields.add("PostFirstOpenOnly");
    openapiFields.add("RawEmailEnabled");
    openapiFields.add("ServerLink");
    openapiFields.add("SmtpApiActivated");
    openapiFields.add("TrackLinks");
    openapiFields.add("TrackOpens");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ServerConfigurationResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ServerConfigurationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServerConfigurationResponse is not found in the empty JSON string", ServerConfigurationResponse.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ApiTokens") != null && !jsonObj.get("ApiTokens").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ApiTokens` to be an array in the JSON string but got `%s`", jsonObj.get("ApiTokens").toString()));
      }
      if ((jsonObj.get("BounceHookUrl") != null && !jsonObj.get("BounceHookUrl").isJsonNull()) && !jsonObj.get("BounceHookUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BounceHookUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BounceHookUrl").toString()));
      }
      if ((jsonObj.get("ClickHookUrl") != null && !jsonObj.get("ClickHookUrl").isJsonNull()) && !jsonObj.get("ClickHookUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClickHookUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClickHookUrl").toString()));
      }
      if ((jsonObj.get("Color") != null && !jsonObj.get("Color").isJsonNull()) && !jsonObj.get("Color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Color").toString()));
      }
      if ((jsonObj.get("DeliveryHookUrl") != null && !jsonObj.get("DeliveryHookUrl").isJsonNull()) && !jsonObj.get("DeliveryHookUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeliveryHookUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeliveryHookUrl").toString()));
      }
      if ((jsonObj.get("InboundAddress") != null && !jsonObj.get("InboundAddress").isJsonNull()) && !jsonObj.get("InboundAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InboundAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InboundAddress").toString()));
      }
      if ((jsonObj.get("InboundDomain") != null && !jsonObj.get("InboundDomain").isJsonNull()) && !jsonObj.get("InboundDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InboundDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InboundDomain").toString()));
      }
      if ((jsonObj.get("InboundHash") != null && !jsonObj.get("InboundHash").isJsonNull()) && !jsonObj.get("InboundHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InboundHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InboundHash").toString()));
      }
      if ((jsonObj.get("InboundHookUrl") != null && !jsonObj.get("InboundHookUrl").isJsonNull()) && !jsonObj.get("InboundHookUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InboundHookUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InboundHookUrl").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("OpenHookUrl") != null && !jsonObj.get("OpenHookUrl").isJsonNull()) && !jsonObj.get("OpenHookUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OpenHookUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OpenHookUrl").toString()));
      }
      if ((jsonObj.get("ServerLink") != null && !jsonObj.get("ServerLink").isJsonNull()) && !jsonObj.get("ServerLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServerLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServerLink").toString()));
      }
      if ((jsonObj.get("TrackLinks") != null && !jsonObj.get("TrackLinks").isJsonNull()) && !jsonObj.get("TrackLinks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TrackLinks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TrackLinks").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServerConfigurationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServerConfigurationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServerConfigurationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServerConfigurationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ServerConfigurationResponse>() {
           @Override
           public void write(JsonWriter out, ServerConfigurationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ServerConfigurationResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ServerConfigurationResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ServerConfigurationResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ServerConfigurationResponse
  * @throws IOException if the JSON string is invalid with respect to ServerConfigurationResponse
  */
  public static ServerConfigurationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServerConfigurationResponse.class);
  }

 /**
  * Convert an instance of ServerConfigurationResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

