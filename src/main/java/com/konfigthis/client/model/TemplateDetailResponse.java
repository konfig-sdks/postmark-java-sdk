/*
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TemplateDetailResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TemplateDetailResponse {
  public static final String SERIALIZED_NAME_ACTIVE = "Active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_ALIAS = "Alias";
  @SerializedName(SERIALIZED_NAME_ALIAS)
  private String alias;

  public static final String SERIALIZED_NAME_ASSOCIATED_SERVER_ID = "AssociatedServerId";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_SERVER_ID)
  private Integer associatedServerId;

  public static final String SERIALIZED_NAME_HTML_BODY = "HtmlBody";
  @SerializedName(SERIALIZED_NAME_HTML_BODY)
  private String htmlBody;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SUBJECT = "Subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TEMPLATE_I_D = "TemplateID";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_I_D)
  private Integer templateID;

  public static final String SERIALIZED_NAME_TEXT_BODY = "TextBody";
  @SerializedName(SERIALIZED_NAME_TEXT_BODY)
  private String textBody;

  public TemplateDetailResponse() {
  }

  public TemplateDetailResponse active(Boolean active) {
    
    
    
    
    this.active = active;
    return this;
  }

   /**
   * Indicates that this template may be used for sending email.
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates that this template may be used for sending email.")

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    
    
    
    this.active = active;
  }


  public TemplateDetailResponse alias(String alias) {
    
    
    
    
    this.alias = alias;
    return this;
  }

   /**
   * The user-supplied alias for this template.
   * @return alias
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user-supplied alias for this template.")

  public String getAlias() {
    return alias;
  }


  public void setAlias(String alias) {
    
    
    
    this.alias = alias;
  }


  public TemplateDetailResponse associatedServerId(Integer associatedServerId) {
    
    
    
    
    this.associatedServerId = associatedServerId;
    return this;
  }

   /**
   * The ID of the Server with which this template is associated.
   * @return associatedServerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the Server with which this template is associated.")

  public Integer getAssociatedServerId() {
    return associatedServerId;
  }


  public void setAssociatedServerId(Integer associatedServerId) {
    
    
    
    this.associatedServerId = associatedServerId;
  }


  public TemplateDetailResponse htmlBody(String htmlBody) {
    
    
    
    
    this.htmlBody = htmlBody;
    return this;
  }

   /**
   * The content to use for the HtmlBody when this template is used to send email.
   * @return htmlBody
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The content to use for the HtmlBody when this template is used to send email.")

  public String getHtmlBody() {
    return htmlBody;
  }


  public void setHtmlBody(String htmlBody) {
    
    
    
    this.htmlBody = htmlBody;
  }


  public TemplateDetailResponse name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The display name for the template.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The display name for the template.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public TemplateDetailResponse subject(String subject) {
    
    
    
    
    this.subject = subject;
    return this;
  }

   /**
   * The content to use for the Subject when this template is used to send email.
   * @return subject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The content to use for the Subject when this template is used to send email.")

  public String getSubject() {
    return subject;
  }


  public void setSubject(String subject) {
    
    
    
    this.subject = subject;
  }


  public TemplateDetailResponse templateID(Integer templateID) {
    
    
    
    
    this.templateID = templateID;
    return this;
  }

   /**
   * The ID associated with the template.
   * @return templateID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID associated with the template.")

  public Integer getTemplateID() {
    return templateID;
  }


  public void setTemplateID(Integer templateID) {
    
    
    
    this.templateID = templateID;
  }


  public TemplateDetailResponse textBody(String textBody) {
    
    
    
    
    this.textBody = textBody;
    return this;
  }

   /**
   * The content to use for the TextBody when this template is used to send email.
   * @return textBody
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The content to use for the TextBody when this template is used to send email.")

  public String getTextBody() {
    return textBody;
  }


  public void setTextBody(String textBody) {
    
    
    
    this.textBody = textBody;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TemplateDetailResponse instance itself
   */
  public TemplateDetailResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateDetailResponse templateDetailResponse = (TemplateDetailResponse) o;
    return Objects.equals(this.active, templateDetailResponse.active) &&
        Objects.equals(this.alias, templateDetailResponse.alias) &&
        Objects.equals(this.associatedServerId, templateDetailResponse.associatedServerId) &&
        Objects.equals(this.htmlBody, templateDetailResponse.htmlBody) &&
        Objects.equals(this.name, templateDetailResponse.name) &&
        Objects.equals(this.subject, templateDetailResponse.subject) &&
        Objects.equals(this.templateID, templateDetailResponse.templateID) &&
        Objects.equals(this.textBody, templateDetailResponse.textBody)&&
        Objects.equals(this.additionalProperties, templateDetailResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, alias, associatedServerId, htmlBody, name, subject, templateID, textBody, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateDetailResponse {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    associatedServerId: ").append(toIndentedString(associatedServerId)).append("\n");
    sb.append("    htmlBody: ").append(toIndentedString(htmlBody)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    templateID: ").append(toIndentedString(templateID)).append("\n");
    sb.append("    textBody: ").append(toIndentedString(textBody)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Active");
    openapiFields.add("Alias");
    openapiFields.add("AssociatedServerId");
    openapiFields.add("HtmlBody");
    openapiFields.add("Name");
    openapiFields.add("Subject");
    openapiFields.add("TemplateID");
    openapiFields.add("TextBody");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TemplateDetailResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TemplateDetailResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TemplateDetailResponse is not found in the empty JSON string", TemplateDetailResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("Alias") != null && !jsonObj.get("Alias").isJsonNull()) && !jsonObj.get("Alias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Alias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Alias").toString()));
      }
      if ((jsonObj.get("HtmlBody") != null && !jsonObj.get("HtmlBody").isJsonNull()) && !jsonObj.get("HtmlBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HtmlBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HtmlBody").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Subject") != null && !jsonObj.get("Subject").isJsonNull()) && !jsonObj.get("Subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Subject").toString()));
      }
      if ((jsonObj.get("TextBody") != null && !jsonObj.get("TextBody").isJsonNull()) && !jsonObj.get("TextBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TextBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TextBody").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TemplateDetailResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TemplateDetailResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TemplateDetailResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TemplateDetailResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<TemplateDetailResponse>() {
           @Override
           public void write(JsonWriter out, TemplateDetailResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TemplateDetailResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TemplateDetailResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TemplateDetailResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TemplateDetailResponse
  * @throws IOException if the JSON string is invalid with respect to TemplateDetailResponse
  */
  public static TemplateDetailResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TemplateDetailResponse.class);
  }

 /**
  * Convert an instance of TemplateDetailResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

