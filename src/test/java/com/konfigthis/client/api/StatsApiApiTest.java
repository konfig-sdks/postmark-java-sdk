/*
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.time.LocalDate;
import com.konfigthis.client.model.OutboundOverviewStatsResponse;
import com.konfigthis.client.model.SentCountsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StatsApiApi
 */
@Disabled
public class StatsApiApiTest {

    private static StatsApiApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new StatsApiApi(apiClient);
    }

    /**
     * Get bounce counts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBounceCountsTest() throws ApiException {
        String tag = null;
        LocalDate fromdate = null;
        LocalDate todate = null;
        Object response = api.getBounceCounts()
                .tag(tag)
                .fromdate(fromdate)
                .todate(todate)
                .execute();
        // TODO: test validations
    }

    /**
     * Get browser plaform usage
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBrowserPlatformUsageTest() throws ApiException {
        String tag = null;
        LocalDate fromdate = null;
        LocalDate todate = null;
        Object response = api.getBrowserPlatformUsage()
                .tag(tag)
                .fromdate(fromdate)
                .todate(todate)
                .execute();
        // TODO: test validations
    }

    /**
     * Get email client usage
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailClientUsageTest() throws ApiException {
        String tag = null;
        LocalDate fromdate = null;
        LocalDate todate = null;
        Object response = api.getEmailClientUsage()
                .tag(tag)
                .fromdate(fromdate)
                .todate(todate)
                .execute();
        // TODO: test validations
    }

    /**
     * Get email open counts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailOpenCountsTest() throws ApiException {
        String tag = null;
        LocalDate fromdate = null;
        LocalDate todate = null;
        Object response = api.getEmailOpenCounts()
                .tag(tag)
                .fromdate(fromdate)
                .todate(todate)
                .execute();
        // TODO: test validations
    }

    /**
     * Get email platform usage
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailPlatformUsageTest() throws ApiException {
        String tag = null;
        LocalDate fromdate = null;
        LocalDate todate = null;
        Object response = api.getEmailPlatformUsage()
                .tag(tag)
                .fromdate(fromdate)
                .todate(todate)
                .execute();
        // TODO: test validations
    }

    /**
     * Get click counts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOutboundClickCountsTest() throws ApiException {
        String tag = null;
        LocalDate fromdate = null;
        LocalDate todate = null;
        Object response = api.getOutboundClickCounts()
                .tag(tag)
                .fromdate(fromdate)
                .todate(todate)
                .execute();
        // TODO: test validations
    }

    /**
     * Get browser usage by family
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOutboundClicksBrowserFamiliesTest() throws ApiException {
        String tag = null;
        LocalDate fromdate = null;
        LocalDate todate = null;
        Object response = api.getOutboundClicksBrowserFamilies()
                .tag(tag)
                .fromdate(fromdate)
                .todate(todate)
                .execute();
        // TODO: test validations
    }

    /**
     * Get clicks by body location
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOutboundClicksLocationTest() throws ApiException {
        String tag = null;
        LocalDate fromdate = null;
        LocalDate todate = null;
        Object response = api.getOutboundClicksLocation()
                .tag(tag)
                .fromdate(fromdate)
                .todate(todate)
                .execute();
        // TODO: test validations
    }

    /**
     * Get outbound overview
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOutboundOverviewTest() throws ApiException {
        String tag = null;
        LocalDate fromdate = null;
        LocalDate todate = null;
        OutboundOverviewStatsResponse response = api.getOutboundOverview()
                .tag(tag)
                .fromdate(fromdate)
                .todate(todate)
                .execute();
        // TODO: test validations
    }

    /**
     * Get sent counts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSentCountsTest() throws ApiException {
        String tag = null;
        LocalDate fromdate = null;
        LocalDate todate = null;
        SentCountsResponse response = api.getSentCounts()
                .tag(tag)
                .fromdate(fromdate)
                .todate(todate)
                .execute();
        // TODO: test validations
    }

    /**
     * Get spam complaints
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpamComplaintsTest() throws ApiException {
        String tag = null;
        LocalDate fromdate = null;
        LocalDate todate = null;
        Object response = api.getSpamComplaints()
                .tag(tag)
                .fromdate(fromdate)
                .todate(todate)
                .execute();
        // TODO: test validations
    }

    /**
     * Get tracked email counts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTrackedEmailCountsTest() throws ApiException {
        String tag = null;
        LocalDate fromdate = null;
        LocalDate todate = null;
        Object response = api.getTrackedEmailCounts()
                .tag(tag)
                .fromdate(fromdate)
                .todate(todate)
                .execute();
        // TODO: test validations
    }

}
